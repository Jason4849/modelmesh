/**
 * Autogenerated by Thrift Compiler (0.14.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ibm.watson.modelmesh.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.2)")
public class LegacyModelMeshService {

  public interface Iface extends com.ibm.watson.modelmesh.thrift.ModelMeshService.Iface {

    /**
     * Adds a trained model to this MM cluster.
     * 
     * @param modelId the id of the model to add
     * 
     * @param runtimeInfo information required to load/serve the model, including the type
     * 
     * @param load whether the model should be loaded immediately
     * 
     * @param sync if load is true, whether this method should block until the load completes
     */
    public com.ibm.watson.modelmesh.thrift.StatusInfo addModel(java.lang.String modelId, ModelInfo runtimeInfo, boolean load, boolean sync) throws InvalidInputException, com.ibm.watson.modelmesh.thrift.InternalException, org.apache.thrift.TException;

    /**
     * Ensures the model with the specified id is loaded in this MM cluster.
     * 
     * @param modelId
     * @param lastUsed the timestamp associated with the load, or 0 for "now" (most typical)
     * 
     * @param excludeInstances optional list of instance ids to exclude - if the model is already loaded in one of these
     * 
     * @param sync
     * @param getStatus whether an accurate loading status should be returned (this parameter might be removed)
     */
    public com.ibm.watson.modelmesh.thrift.StatusInfo ensureLoaded(java.lang.String modelId, long lastUsed, java.util.List<java.lang.String> excludeInstances, boolean sync, boolean getStatus) throws com.ibm.watson.modelmesh.thrift.ModelNotFoundException, com.ibm.watson.modelmesh.thrift.InternalException, org.apache.thrift.TException;

    /**
     * Removes the model with the specified id from this MM cluster. Has no effect if the specified model isn't found
     * 
     * @param modelId
     */
    public void deleteModel(java.lang.String modelId) throws com.ibm.watson.modelmesh.thrift.InternalException, InvalidStateException, org.apache.thrift.TException;

    /**
     * Returns the status of the specified model. See the {@link Status} enum.
     * 
     * @param modelId
     */
    public com.ibm.watson.modelmesh.thrift.StatusInfo getStatus(java.lang.String modelId) throws com.ibm.watson.modelmesh.thrift.InternalException, org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.ibm.watson.modelmesh.thrift.ModelMeshService .AsyncIface {

    public void addModel(java.lang.String modelId, ModelInfo runtimeInfo, boolean load, boolean sync, org.apache.thrift.async.AsyncMethodCallback<com.ibm.watson.modelmesh.thrift.StatusInfo> resultHandler) throws org.apache.thrift.TException;

    public void ensureLoaded(java.lang.String modelId, long lastUsed, java.util.List<java.lang.String> excludeInstances, boolean sync, boolean getStatus, org.apache.thrift.async.AsyncMethodCallback<com.ibm.watson.modelmesh.thrift.StatusInfo> resultHandler) throws org.apache.thrift.TException;

    public void deleteModel(java.lang.String modelId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void getStatus(java.lang.String modelId, org.apache.thrift.async.AsyncMethodCallback<com.ibm.watson.modelmesh.thrift.StatusInfo> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.ibm.watson.modelmesh.thrift.ModelMeshService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.ibm.watson.modelmesh.thrift.StatusInfo addModel(java.lang.String modelId, ModelInfo runtimeInfo, boolean load, boolean sync) throws InvalidInputException, com.ibm.watson.modelmesh.thrift.InternalException, org.apache.thrift.TException
    {
      send_addModel(modelId, runtimeInfo, load, sync);
      return recv_addModel();
    }

    public void send_addModel(java.lang.String modelId, ModelInfo runtimeInfo, boolean load, boolean sync) throws org.apache.thrift.TException
    {
      addModel_args args = new addModel_args();
      args.setModelId(modelId);
      args.setRuntimeInfo(runtimeInfo);
      args.setLoad(load);
      args.setSync(sync);
      sendBase("addModel", args);
    }

    public com.ibm.watson.modelmesh.thrift.StatusInfo recv_addModel() throws InvalidInputException, com.ibm.watson.modelmesh.thrift.InternalException, org.apache.thrift.TException
    {
      addModel_result result = new addModel_result();
      receiveBase(result, "addModel");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.iiException != null) {
        throw result.iiException;
      }
      if (result.iException != null) {
        throw result.iException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addModel failed: unknown result");
    }

    public com.ibm.watson.modelmesh.thrift.StatusInfo ensureLoaded(java.lang.String modelId, long lastUsed, java.util.List<java.lang.String> excludeInstances, boolean sync, boolean getStatus) throws com.ibm.watson.modelmesh.thrift.ModelNotFoundException, com.ibm.watson.modelmesh.thrift.InternalException, org.apache.thrift.TException
    {
      send_ensureLoaded(modelId, lastUsed, excludeInstances, sync, getStatus);
      return recv_ensureLoaded();
    }

    public void send_ensureLoaded(java.lang.String modelId, long lastUsed, java.util.List<java.lang.String> excludeInstances, boolean sync, boolean getStatus) throws org.apache.thrift.TException
    {
      ensureLoaded_args args = new ensureLoaded_args();
      args.setModelId(modelId);
      args.setLastUsed(lastUsed);
      args.setExcludeInstances(excludeInstances);
      args.setSync(sync);
      args.setGetStatus(getStatus);
      sendBase("ensureLoaded", args);
    }

    public com.ibm.watson.modelmesh.thrift.StatusInfo recv_ensureLoaded() throws com.ibm.watson.modelmesh.thrift.ModelNotFoundException, com.ibm.watson.modelmesh.thrift.InternalException, org.apache.thrift.TException
    {
      ensureLoaded_result result = new ensureLoaded_result();
      receiveBase(result, "ensureLoaded");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.mnfException != null) {
        throw result.mnfException;
      }
      if (result.iException != null) {
        throw result.iException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ensureLoaded failed: unknown result");
    }

    public void deleteModel(java.lang.String modelId) throws com.ibm.watson.modelmesh.thrift.InternalException, InvalidStateException, org.apache.thrift.TException
    {
      send_deleteModel(modelId);
      recv_deleteModel();
    }

    public void send_deleteModel(java.lang.String modelId) throws org.apache.thrift.TException
    {
      deleteModel_args args = new deleteModel_args();
      args.setModelId(modelId);
      sendBase("deleteModel", args);
    }

    public void recv_deleteModel() throws com.ibm.watson.modelmesh.thrift.InternalException, InvalidStateException, org.apache.thrift.TException
    {
      deleteModel_result result = new deleteModel_result();
      receiveBase(result, "deleteModel");
      if (result.iException != null) {
        throw result.iException;
      }
      if (result.isException != null) {
        throw result.isException;
      }
      return;
    }

    public com.ibm.watson.modelmesh.thrift.StatusInfo getStatus(java.lang.String modelId) throws com.ibm.watson.modelmesh.thrift.InternalException, org.apache.thrift.TException
    {
      send_getStatus(modelId);
      return recv_getStatus();
    }

    public void send_getStatus(java.lang.String modelId) throws org.apache.thrift.TException
    {
      getStatus_args args = new getStatus_args();
      args.setModelId(modelId);
      sendBase("getStatus", args);
    }

    public com.ibm.watson.modelmesh.thrift.StatusInfo recv_getStatus() throws com.ibm.watson.modelmesh.thrift.InternalException, org.apache.thrift.TException
    {
      getStatus_result result = new getStatus_result();
      receiveBase(result, "getStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.iException != null) {
        throw result.iException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStatus failed: unknown result");
    }

  }
  public static class AsyncClient extends com.ibm.watson.modelmesh.thrift.ModelMeshService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addModel(java.lang.String modelId, ModelInfo runtimeInfo, boolean load, boolean sync, org.apache.thrift.async.AsyncMethodCallback<com.ibm.watson.modelmesh.thrift.StatusInfo> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addModel_call method_call = new addModel_call(modelId, runtimeInfo, load, sync, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addModel_call extends org.apache.thrift.async.TAsyncMethodCall<com.ibm.watson.modelmesh.thrift.StatusInfo> {
      private java.lang.String modelId;
      private ModelInfo runtimeInfo;
      private boolean load;
      private boolean sync;
      public addModel_call(java.lang.String modelId, ModelInfo runtimeInfo, boolean load, boolean sync, org.apache.thrift.async.AsyncMethodCallback<com.ibm.watson.modelmesh.thrift.StatusInfo> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.modelId = modelId;
        this.runtimeInfo = runtimeInfo;
        this.load = load;
        this.sync = sync;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addModel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addModel_args args = new addModel_args();
        args.setModelId(modelId);
        args.setRuntimeInfo(runtimeInfo);
        args.setLoad(load);
        args.setSync(sync);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ibm.watson.modelmesh.thrift.StatusInfo getResult() throws InvalidInputException, com.ibm.watson.modelmesh.thrift.InternalException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addModel();
      }
    }

    public void ensureLoaded(java.lang.String modelId, long lastUsed, java.util.List<java.lang.String> excludeInstances, boolean sync, boolean getStatus, org.apache.thrift.async.AsyncMethodCallback<com.ibm.watson.modelmesh.thrift.StatusInfo> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ensureLoaded_call method_call = new ensureLoaded_call(modelId, lastUsed, excludeInstances, sync, getStatus, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ensureLoaded_call extends org.apache.thrift.async.TAsyncMethodCall<com.ibm.watson.modelmesh.thrift.StatusInfo> {
      private java.lang.String modelId;
      private long lastUsed;
      private java.util.List<java.lang.String> excludeInstances;
      private boolean sync;
      private boolean getStatus;
      public ensureLoaded_call(java.lang.String modelId, long lastUsed, java.util.List<java.lang.String> excludeInstances, boolean sync, boolean getStatus, org.apache.thrift.async.AsyncMethodCallback<com.ibm.watson.modelmesh.thrift.StatusInfo> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.modelId = modelId;
        this.lastUsed = lastUsed;
        this.excludeInstances = excludeInstances;
        this.sync = sync;
        this.getStatus = getStatus;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ensureLoaded", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ensureLoaded_args args = new ensureLoaded_args();
        args.setModelId(modelId);
        args.setLastUsed(lastUsed);
        args.setExcludeInstances(excludeInstances);
        args.setSync(sync);
        args.setGetStatus(getStatus);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ibm.watson.modelmesh.thrift.StatusInfo getResult() throws com.ibm.watson.modelmesh.thrift.ModelNotFoundException, com.ibm.watson.modelmesh.thrift.InternalException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ensureLoaded();
      }
    }

    public void deleteModel(java.lang.String modelId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteModel_call method_call = new deleteModel_call(modelId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteModel_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String modelId;
      public deleteModel_call(java.lang.String modelId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.modelId = modelId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteModel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteModel_args args = new deleteModel_args();
        args.setModelId(modelId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws com.ibm.watson.modelmesh.thrift.InternalException, InvalidStateException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void getStatus(java.lang.String modelId, org.apache.thrift.async.AsyncMethodCallback<com.ibm.watson.modelmesh.thrift.StatusInfo> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getStatus_call method_call = new getStatus_call(modelId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStatus_call extends org.apache.thrift.async.TAsyncMethodCall<com.ibm.watson.modelmesh.thrift.StatusInfo> {
      private java.lang.String modelId;
      public getStatus_call(java.lang.String modelId, org.apache.thrift.async.AsyncMethodCallback<com.ibm.watson.modelmesh.thrift.StatusInfo> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.modelId = modelId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStatus_args args = new getStatus_args();
        args.setModelId(modelId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ibm.watson.modelmesh.thrift.StatusInfo getResult() throws com.ibm.watson.modelmesh.thrift.InternalException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStatus();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.ibm.watson.modelmesh.thrift.ModelMeshService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addModel", new addModel());
      processMap.put("ensureLoaded", new ensureLoaded());
      processMap.put("deleteModel", new deleteModel());
      processMap.put("getStatus", new getStatus());
      return processMap;
    }

    public static class addModel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addModel_args> {
      public addModel() {
        super("addModel");
      }

      public addModel_args getEmptyArgsInstance() {
        return new addModel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public addModel_result getResult(I iface, addModel_args args) throws org.apache.thrift.TException {
        addModel_result result = new addModel_result();
        try {
          result.success = iface.addModel(args.modelId, args.runtimeInfo, args.load, args.sync);
        } catch (InvalidInputException iiException) {
          result.iiException = iiException;
        } catch (com.ibm.watson.modelmesh.thrift.InternalException iException) {
          result.iException = iException;
        }
        return result;
      }
    }

    public static class ensureLoaded<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ensureLoaded_args> {
      public ensureLoaded() {
        super("ensureLoaded");
      }

      public ensureLoaded_args getEmptyArgsInstance() {
        return new ensureLoaded_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public ensureLoaded_result getResult(I iface, ensureLoaded_args args) throws org.apache.thrift.TException {
        ensureLoaded_result result = new ensureLoaded_result();
        try {
          result.success = iface.ensureLoaded(args.modelId, args.lastUsed, args.excludeInstances, args.sync, args.getStatus);
        } catch (com.ibm.watson.modelmesh.thrift.ModelNotFoundException mnfException) {
          result.mnfException = mnfException;
        } catch (com.ibm.watson.modelmesh.thrift.InternalException iException) {
          result.iException = iException;
        }
        return result;
      }
    }

    public static class deleteModel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteModel_args> {
      public deleteModel() {
        super("deleteModel");
      }

      public deleteModel_args getEmptyArgsInstance() {
        return new deleteModel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public deleteModel_result getResult(I iface, deleteModel_args args) throws org.apache.thrift.TException {
        deleteModel_result result = new deleteModel_result();
        try {
          iface.deleteModel(args.modelId);
        } catch (com.ibm.watson.modelmesh.thrift.InternalException iException) {
          result.iException = iException;
        } catch (InvalidStateException isException) {
          result.isException = isException;
        }
        return result;
      }
    }

    public static class getStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStatus_args> {
      public getStatus() {
        super("getStatus");
      }

      public getStatus_args getEmptyArgsInstance() {
        return new getStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getStatus_result getResult(I iface, getStatus_args args) throws org.apache.thrift.TException {
        getStatus_result result = new getStatus_result();
        try {
          result.success = iface.getStatus(args.modelId);
        } catch (com.ibm.watson.modelmesh.thrift.InternalException iException) {
          result.iException = iException;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.ibm.watson.modelmesh.thrift.ModelMeshService.AsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addModel", new addModel());
      processMap.put("ensureLoaded", new ensureLoaded());
      processMap.put("deleteModel", new deleteModel());
      processMap.put("getStatus", new getStatus());
      return processMap;
    }

    public static class addModel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addModel_args, com.ibm.watson.modelmesh.thrift.StatusInfo> {
      public addModel() {
        super("addModel");
      }

      public addModel_args getEmptyArgsInstance() {
        return new addModel_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.ibm.watson.modelmesh.thrift.StatusInfo> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.ibm.watson.modelmesh.thrift.StatusInfo>() { 
          public void onComplete(com.ibm.watson.modelmesh.thrift.StatusInfo o) {
            addModel_result result = new addModel_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            addModel_result result = new addModel_result();
            if (e instanceof InvalidInputException) {
              result.iiException = (InvalidInputException) e;
              result.setIiExceptionIsSet(true);
              msg = result;
            } else if (e instanceof com.ibm.watson.modelmesh.thrift.InternalException) {
              result.iException = (com.ibm.watson.modelmesh.thrift.InternalException) e;
              result.setIExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addModel_args args, org.apache.thrift.async.AsyncMethodCallback<com.ibm.watson.modelmesh.thrift.StatusInfo> resultHandler) throws org.apache.thrift.TException {
        iface.addModel(args.modelId, args.runtimeInfo, args.load, args.sync,resultHandler);
      }
    }

    public static class ensureLoaded<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ensureLoaded_args, com.ibm.watson.modelmesh.thrift.StatusInfo> {
      public ensureLoaded() {
        super("ensureLoaded");
      }

      public ensureLoaded_args getEmptyArgsInstance() {
        return new ensureLoaded_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.ibm.watson.modelmesh.thrift.StatusInfo> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.ibm.watson.modelmesh.thrift.StatusInfo>() { 
          public void onComplete(com.ibm.watson.modelmesh.thrift.StatusInfo o) {
            ensureLoaded_result result = new ensureLoaded_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ensureLoaded_result result = new ensureLoaded_result();
            if (e instanceof com.ibm.watson.modelmesh.thrift.ModelNotFoundException) {
              result.mnfException = (com.ibm.watson.modelmesh.thrift.ModelNotFoundException) e;
              result.setMnfExceptionIsSet(true);
              msg = result;
            } else if (e instanceof com.ibm.watson.modelmesh.thrift.InternalException) {
              result.iException = (com.ibm.watson.modelmesh.thrift.InternalException) e;
              result.setIExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ensureLoaded_args args, org.apache.thrift.async.AsyncMethodCallback<com.ibm.watson.modelmesh.thrift.StatusInfo> resultHandler) throws org.apache.thrift.TException {
        iface.ensureLoaded(args.modelId, args.lastUsed, args.excludeInstances, args.sync, args.getStatus,resultHandler);
      }
    }

    public static class deleteModel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteModel_args, Void> {
      public deleteModel() {
        super("deleteModel");
      }

      public deleteModel_args getEmptyArgsInstance() {
        return new deleteModel_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deleteModel_result result = new deleteModel_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            deleteModel_result result = new deleteModel_result();
            if (e instanceof com.ibm.watson.modelmesh.thrift.InternalException) {
              result.iException = (com.ibm.watson.modelmesh.thrift.InternalException) e;
              result.setIExceptionIsSet(true);
              msg = result;
            } else if (e instanceof InvalidStateException) {
              result.isException = (InvalidStateException) e;
              result.setIsExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteModel_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.deleteModel(args.modelId,resultHandler);
      }
    }

    public static class getStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getStatus_args, com.ibm.watson.modelmesh.thrift.StatusInfo> {
      public getStatus() {
        super("getStatus");
      }

      public getStatus_args getEmptyArgsInstance() {
        return new getStatus_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.ibm.watson.modelmesh.thrift.StatusInfo> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.ibm.watson.modelmesh.thrift.StatusInfo>() { 
          public void onComplete(com.ibm.watson.modelmesh.thrift.StatusInfo o) {
            getStatus_result result = new getStatus_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getStatus_result result = new getStatus_result();
            if (e instanceof com.ibm.watson.modelmesh.thrift.InternalException) {
              result.iException = (com.ibm.watson.modelmesh.thrift.InternalException) e;
              result.setIExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getStatus_args args, org.apache.thrift.async.AsyncMethodCallback<com.ibm.watson.modelmesh.thrift.StatusInfo> resultHandler) throws org.apache.thrift.TException {
        iface.getStatus(args.modelId,resultHandler);
      }
    }

  }

  public static class addModel_args implements org.apache.thrift.TBase<addModel_args, addModel_args._Fields>, java.io.Serializable, Cloneable, Comparable<addModel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addModel_args");

    private static final org.apache.thrift.protocol.TField MODEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("modelId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField RUNTIME_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("runtimeInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField LOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("load", org.apache.thrift.protocol.TType.BOOL, (short)3);
    private static final org.apache.thrift.protocol.TField SYNC_FIELD_DESC = new org.apache.thrift.protocol.TField("sync", org.apache.thrift.protocol.TType.BOOL, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addModel_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addModel_argsTupleSchemeFactory();

    /**
     * the id of the model to add
     */
    public @org.apache.thrift.annotation.Nullable java.lang.String modelId; // required
    /**
     * information required to load/serve the model, including the type
     */
    public @org.apache.thrift.annotation.Nullable ModelInfo runtimeInfo; // required
    /**
     * whether the model should be loaded immediately
     */
    public boolean load; // required
    /**
     * if load is true, whether this method should block until the load completes
     */
    public boolean sync; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * the id of the model to add
       */
      MODEL_ID((short)1, "modelId"),
      /**
       * information required to load/serve the model, including the type
       */
      RUNTIME_INFO((short)2, "runtimeInfo"),
      /**
       * whether the model should be loaded immediately
       */
      LOAD((short)3, "load"),
      /**
       * if load is true, whether this method should block until the load completes
       */
      SYNC((short)4, "sync");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MODEL_ID
            return MODEL_ID;
          case 2: // RUNTIME_INFO
            return RUNTIME_INFO;
          case 3: // LOAD
            return LOAD;
          case 4: // SYNC
            return SYNC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOAD_ISSET_ID = 0;
    private static final int __SYNC_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MODEL_ID, new org.apache.thrift.meta_data.FieldMetaData("modelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RUNTIME_INFO, new org.apache.thrift.meta_data.FieldMetaData("runtimeInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ModelInfo.class)));
      tmpMap.put(_Fields.LOAD, new org.apache.thrift.meta_data.FieldMetaData("load", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.SYNC, new org.apache.thrift.meta_data.FieldMetaData("sync", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addModel_args.class, metaDataMap);
    }

    public addModel_args() {
    }

    public addModel_args(
      java.lang.String modelId,
      ModelInfo runtimeInfo,
      boolean load,
      boolean sync)
    {
      this();
      this.modelId = modelId;
      this.runtimeInfo = runtimeInfo;
      this.load = load;
      setLoadIsSet(true);
      this.sync = sync;
      setSyncIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addModel_args(addModel_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetModelId()) {
        this.modelId = other.modelId;
      }
      if (other.isSetRuntimeInfo()) {
        this.runtimeInfo = new ModelInfo(other.runtimeInfo);
      }
      this.load = other.load;
      this.sync = other.sync;
    }

    public addModel_args deepCopy() {
      return new addModel_args(this);
    }

    @Override
    public void clear() {
      this.modelId = null;
      if (this.runtimeInfo != null) {
        this.runtimeInfo.clear();
      }
      setLoadIsSet(false);
      this.load = false;
      setSyncIsSet(false);
      this.sync = false;
    }

    /**
     * the id of the model to add
     */
    @org.apache.thrift.annotation.Nullable
    public java.lang.String getModelId() {
      return this.modelId;
    }

    /**
     * the id of the model to add
     */
    public addModel_args setModelId(@org.apache.thrift.annotation.Nullable java.lang.String modelId) {
      this.modelId = modelId;
      return this;
    }

    public void unsetModelId() {
      this.modelId = null;
    }

    /** Returns true if field modelId is set (has been assigned a value) and false otherwise */
    public boolean isSetModelId() {
      return this.modelId != null;
    }

    public void setModelIdIsSet(boolean value) {
      if (!value) {
        this.modelId = null;
      }
    }

    /**
     * information required to load/serve the model, including the type
     */
    @org.apache.thrift.annotation.Nullable
    public ModelInfo getRuntimeInfo() {
      return this.runtimeInfo;
    }

    /**
     * information required to load/serve the model, including the type
     */
    public addModel_args setRuntimeInfo(@org.apache.thrift.annotation.Nullable ModelInfo runtimeInfo) {
      this.runtimeInfo = runtimeInfo;
      return this;
    }

    public void unsetRuntimeInfo() {
      this.runtimeInfo = null;
    }

    /** Returns true if field runtimeInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetRuntimeInfo() {
      return this.runtimeInfo != null;
    }

    public void setRuntimeInfoIsSet(boolean value) {
      if (!value) {
        this.runtimeInfo = null;
      }
    }

    /**
     * whether the model should be loaded immediately
     */
    public boolean isLoad() {
      return this.load;
    }

    /**
     * whether the model should be loaded immediately
     */
    public addModel_args setLoad(boolean load) {
      this.load = load;
      setLoadIsSet(true);
      return this;
    }

    public void unsetLoad() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOAD_ISSET_ID);
    }

    /** Returns true if field load is set (has been assigned a value) and false otherwise */
    public boolean isSetLoad() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOAD_ISSET_ID);
    }

    public void setLoadIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOAD_ISSET_ID, value);
    }

    /**
     * if load is true, whether this method should block until the load completes
     */
    public boolean isSync() {
      return this.sync;
    }

    /**
     * if load is true, whether this method should block until the load completes
     */
    public addModel_args setSync(boolean sync) {
      this.sync = sync;
      setSyncIsSet(true);
      return this;
    }

    public void unsetSync() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SYNC_ISSET_ID);
    }

    /** Returns true if field sync is set (has been assigned a value) and false otherwise */
    public boolean isSetSync() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SYNC_ISSET_ID);
    }

    public void setSyncIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SYNC_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case MODEL_ID:
        if (value == null) {
          unsetModelId();
        } else {
          setModelId((java.lang.String)value);
        }
        break;

      case RUNTIME_INFO:
        if (value == null) {
          unsetRuntimeInfo();
        } else {
          setRuntimeInfo((ModelInfo)value);
        }
        break;

      case LOAD:
        if (value == null) {
          unsetLoad();
        } else {
          setLoad((java.lang.Boolean)value);
        }
        break;

      case SYNC:
        if (value == null) {
          unsetSync();
        } else {
          setSync((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MODEL_ID:
        return getModelId();

      case RUNTIME_INFO:
        return getRuntimeInfo();

      case LOAD:
        return isLoad();

      case SYNC:
        return isSync();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MODEL_ID:
        return isSetModelId();
      case RUNTIME_INFO:
        return isSetRuntimeInfo();
      case LOAD:
        return isSetLoad();
      case SYNC:
        return isSetSync();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof addModel_args)
        return this.equals((addModel_args)that);
      return false;
    }

    public boolean equals(addModel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_modelId = true && this.isSetModelId();
      boolean that_present_modelId = true && that.isSetModelId();
      if (this_present_modelId || that_present_modelId) {
        if (!(this_present_modelId && that_present_modelId))
          return false;
        if (!this.modelId.equals(that.modelId))
          return false;
      }

      boolean this_present_runtimeInfo = true && this.isSetRuntimeInfo();
      boolean that_present_runtimeInfo = true && that.isSetRuntimeInfo();
      if (this_present_runtimeInfo || that_present_runtimeInfo) {
        if (!(this_present_runtimeInfo && that_present_runtimeInfo))
          return false;
        if (!this.runtimeInfo.equals(that.runtimeInfo))
          return false;
      }

      boolean this_present_load = true;
      boolean that_present_load = true;
      if (this_present_load || that_present_load) {
        if (!(this_present_load && that_present_load))
          return false;
        if (this.load != that.load)
          return false;
      }

      boolean this_present_sync = true;
      boolean that_present_sync = true;
      if (this_present_sync || that_present_sync) {
        if (!(this_present_sync && that_present_sync))
          return false;
        if (this.sync != that.sync)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetModelId()) ? 131071 : 524287);
      if (isSetModelId())
        hashCode = hashCode * 8191 + modelId.hashCode();

      hashCode = hashCode * 8191 + ((isSetRuntimeInfo()) ? 131071 : 524287);
      if (isSetRuntimeInfo())
        hashCode = hashCode * 8191 + runtimeInfo.hashCode();

      hashCode = hashCode * 8191 + ((load) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((sync) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(addModel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetModelId(), other.isSetModelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelId, other.modelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetRuntimeInfo(), other.isSetRuntimeInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRuntimeInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runtimeInfo, other.runtimeInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetLoad(), other.isSetLoad());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoad()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.load, other.load);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetSync(), other.isSetSync());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSync()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sync, other.sync);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addModel_args(");
      boolean first = true;

      sb.append("modelId:");
      if (this.modelId == null) {
        sb.append("null");
      } else {
        sb.append(this.modelId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("runtimeInfo:");
      if (this.runtimeInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.runtimeInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("load:");
      sb.append(this.load);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sync:");
      sb.append(this.sync);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (runtimeInfo != null) {
        runtimeInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addModel_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addModel_argsStandardScheme getScheme() {
        return new addModel_argsStandardScheme();
      }
    }

    private static class addModel_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addModel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addModel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MODEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.modelId = iprot.readString();
                struct.setModelIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RUNTIME_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.runtimeInfo == null) {
                  struct.runtimeInfo = new ModelInfo();
                }
                struct.runtimeInfo.read(iprot);
                struct.setRuntimeInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LOAD
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.load = iprot.readBool();
                struct.setLoadIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SYNC
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.sync = iprot.readBool();
                struct.setSyncIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addModel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.modelId != null) {
          oprot.writeFieldBegin(MODEL_ID_FIELD_DESC);
          oprot.writeString(struct.modelId);
          oprot.writeFieldEnd();
        }
        if (struct.runtimeInfo != null) {
          oprot.writeFieldBegin(RUNTIME_INFO_FIELD_DESC);
          struct.runtimeInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(LOAD_FIELD_DESC);
        oprot.writeBool(struct.load);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SYNC_FIELD_DESC);
        oprot.writeBool(struct.sync);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addModel_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addModel_argsTupleScheme getScheme() {
        return new addModel_argsTupleScheme();
      }
    }

    private static class addModel_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addModel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addModel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetModelId()) {
          optionals.set(0);
        }
        if (struct.isSetRuntimeInfo()) {
          optionals.set(1);
        }
        if (struct.isSetLoad()) {
          optionals.set(2);
        }
        if (struct.isSetSync()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetModelId()) {
          oprot.writeString(struct.modelId);
        }
        if (struct.isSetRuntimeInfo()) {
          struct.runtimeInfo.write(oprot);
        }
        if (struct.isSetLoad()) {
          oprot.writeBool(struct.load);
        }
        if (struct.isSetSync()) {
          oprot.writeBool(struct.sync);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addModel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.modelId = iprot.readString();
          struct.setModelIdIsSet(true);
        }
        if (incoming.get(1)) {
          if (struct.runtimeInfo == null) {
            struct.runtimeInfo = new ModelInfo();
          }
          struct.runtimeInfo.read(iprot);
          struct.setRuntimeInfoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.load = iprot.readBool();
          struct.setLoadIsSet(true);
        }
        if (incoming.get(3)) {
          struct.sync = iprot.readBool();
          struct.setSyncIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addModel_result implements org.apache.thrift.TBase<addModel_result, addModel_result._Fields>, java.io.Serializable, Cloneable, Comparable<addModel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addModel_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField II_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("iiException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField I_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("iException", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addModel_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addModel_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.ibm.watson.modelmesh.thrift.StatusInfo success; // required
    /**
     * invalid value provided for parameter or inconsistent with existing model
     */
    public @org.apache.thrift.annotation.Nullable InvalidInputException iiException; // required
    /**
     * unexpected internal errors
     */
    public @org.apache.thrift.annotation.Nullable com.ibm.watson.modelmesh.thrift.InternalException iException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      /**
       * invalid value provided for parameter or inconsistent with existing model
       */
      II_EXCEPTION((short)1, "iiException"),
      /**
       * unexpected internal errors
       */
      I_EXCEPTION((short)2, "iException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // II_EXCEPTION
            return II_EXCEPTION;
          case 2: // I_EXCEPTION
            return I_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ibm.watson.modelmesh.thrift.StatusInfo.class)));
      tmpMap.put(_Fields.II_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("iiException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InvalidInputException.class)));
      tmpMap.put(_Fields.I_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("iException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ibm.watson.modelmesh.thrift.InternalException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addModel_result.class, metaDataMap);
    }

    public addModel_result() {
    }

    public addModel_result(
      com.ibm.watson.modelmesh.thrift.StatusInfo success,
      InvalidInputException iiException,
      com.ibm.watson.modelmesh.thrift.InternalException iException)
    {
      this();
      this.success = success;
      this.iiException = iiException;
      this.iException = iException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addModel_result(addModel_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ibm.watson.modelmesh.thrift.StatusInfo(other.success);
      }
      if (other.isSetIiException()) {
        this.iiException = new InvalidInputException(other.iiException);
      }
      if (other.isSetIException()) {
        this.iException = new com.ibm.watson.modelmesh.thrift.InternalException(other.iException);
      }
    }

    public addModel_result deepCopy() {
      return new addModel_result(this);
    }

    @Override
    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
      this.iiException = null;
      this.iException = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.ibm.watson.modelmesh.thrift.StatusInfo getSuccess() {
      return this.success;
    }

    public addModel_result setSuccess(@org.apache.thrift.annotation.Nullable com.ibm.watson.modelmesh.thrift.StatusInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    /**
     * invalid value provided for parameter or inconsistent with existing model
     */
    @org.apache.thrift.annotation.Nullable
    public InvalidInputException getIiException() {
      return this.iiException;
    }

    /**
     * invalid value provided for parameter or inconsistent with existing model
     */
    public addModel_result setIiException(@org.apache.thrift.annotation.Nullable InvalidInputException iiException) {
      this.iiException = iiException;
      return this;
    }

    public void unsetIiException() {
      this.iiException = null;
    }

    /** Returns true if field iiException is set (has been assigned a value) and false otherwise */
    public boolean isSetIiException() {
      return this.iiException != null;
    }

    public void setIiExceptionIsSet(boolean value) {
      if (!value) {
        this.iiException = null;
      }
    }

    /**
     * unexpected internal errors
     */
    @org.apache.thrift.annotation.Nullable
    public com.ibm.watson.modelmesh.thrift.InternalException getIException() {
      return this.iException;
    }

    /**
     * unexpected internal errors
     */
    public addModel_result setIException(@org.apache.thrift.annotation.Nullable com.ibm.watson.modelmesh.thrift.InternalException iException) {
      this.iException = iException;
      return this;
    }

    public void unsetIException() {
      this.iException = null;
    }

    /** Returns true if field iException is set (has been assigned a value) and false otherwise */
    public boolean isSetIException() {
      return this.iException != null;
    }

    public void setIExceptionIsSet(boolean value) {
      if (!value) {
        this.iException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ibm.watson.modelmesh.thrift.StatusInfo)value);
        }
        break;

      case II_EXCEPTION:
        if (value == null) {
          unsetIiException();
        } else {
          setIiException((InvalidInputException)value);
        }
        break;

      case I_EXCEPTION:
        if (value == null) {
          unsetIException();
        } else {
          setIException((com.ibm.watson.modelmesh.thrift.InternalException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case II_EXCEPTION:
        return getIiException();

      case I_EXCEPTION:
        return getIException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case II_EXCEPTION:
        return isSetIiException();
      case I_EXCEPTION:
        return isSetIException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof addModel_result)
        return this.equals((addModel_result)that);
      return false;
    }

    public boolean equals(addModel_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_iiException = true && this.isSetIiException();
      boolean that_present_iiException = true && that.isSetIiException();
      if (this_present_iiException || that_present_iiException) {
        if (!(this_present_iiException && that_present_iiException))
          return false;
        if (!this.iiException.equals(that.iiException))
          return false;
      }

      boolean this_present_iException = true && this.isSetIException();
      boolean that_present_iException = true && that.isSetIException();
      if (this_present_iException || that_present_iException) {
        if (!(this_present_iException && that_present_iException))
          return false;
        if (!this.iException.equals(that.iException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetIiException()) ? 131071 : 524287);
      if (isSetIiException())
        hashCode = hashCode * 8191 + iiException.hashCode();

      hashCode = hashCode * 8191 + ((isSetIException()) ? 131071 : 524287);
      if (isSetIException())
        hashCode = hashCode * 8191 + iException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addModel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetIiException(), other.isSetIiException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIiException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iiException, other.iiException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetIException(), other.isSetIException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iException, other.iException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addModel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("iiException:");
      if (this.iiException == null) {
        sb.append("null");
      } else {
        sb.append(this.iiException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("iException:");
      if (this.iException == null) {
        sb.append("null");
      } else {
        sb.append(this.iException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addModel_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addModel_resultStandardScheme getScheme() {
        return new addModel_resultStandardScheme();
      }
    }

    private static class addModel_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addModel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addModel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new com.ibm.watson.modelmesh.thrift.StatusInfo();
                }
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // II_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.iiException == null) {
                  struct.iiException = new InvalidInputException();
                }
                struct.iiException.read(iprot);
                struct.setIiExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // I_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.iException == null) {
                  struct.iException = new com.ibm.watson.modelmesh.thrift.InternalException();
                }
                struct.iException.read(iprot);
                struct.setIExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addModel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.iiException != null) {
          oprot.writeFieldBegin(II_EXCEPTION_FIELD_DESC);
          struct.iiException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.iException != null) {
          oprot.writeFieldBegin(I_EXCEPTION_FIELD_DESC);
          struct.iException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addModel_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addModel_resultTupleScheme getScheme() {
        return new addModel_resultTupleScheme();
      }
    }

    private static class addModel_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addModel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addModel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIiException()) {
          optionals.set(1);
        }
        if (struct.isSetIException()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIiException()) {
          struct.iiException.write(oprot);
        }
        if (struct.isSetIException()) {
          struct.iException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addModel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new com.ibm.watson.modelmesh.thrift.StatusInfo();
          }
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          if (struct.iiException == null) {
            struct.iiException = new InvalidInputException();
          }
          struct.iiException.read(iprot);
          struct.setIiExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          if (struct.iException == null) {
            struct.iException = new com.ibm.watson.modelmesh.thrift.InternalException();
          }
          struct.iException.read(iprot);
          struct.setIExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ensureLoaded_args implements org.apache.thrift.TBase<ensureLoaded_args, ensureLoaded_args._Fields>, java.io.Serializable, Cloneable, Comparable<ensureLoaded_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ensureLoaded_args");

    private static final org.apache.thrift.protocol.TField MODEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("modelId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LAST_USED_FIELD_DESC = new org.apache.thrift.protocol.TField("lastUsed", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField EXCLUDE_INSTANCES_FIELD_DESC = new org.apache.thrift.protocol.TField("excludeInstances", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField SYNC_FIELD_DESC = new org.apache.thrift.protocol.TField("sync", org.apache.thrift.protocol.TType.BOOL, (short)4);
    private static final org.apache.thrift.protocol.TField GET_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("getStatus", org.apache.thrift.protocol.TType.BOOL, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ensureLoaded_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ensureLoaded_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String modelId; // required
    /**
     * the timestamp associated with the load, or 0 for "now" (most typical)
     */
    public long lastUsed; // required
    /**
     * optional list of instance ids to exclude - if the model is already loaded in one of these
     */
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> excludeInstances; // required
    public boolean sync; // required
    /**
     * whether an accurate loading status should be returned (this parameter might be removed)
     */
    public boolean getStatus; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MODEL_ID((short)1, "modelId"),
      /**
       * the timestamp associated with the load, or 0 for "now" (most typical)
       */
      LAST_USED((short)2, "lastUsed"),
      /**
       * optional list of instance ids to exclude - if the model is already loaded in one of these
       */
      EXCLUDE_INSTANCES((short)3, "excludeInstances"),
      SYNC((short)4, "sync"),
      /**
       * whether an accurate loading status should be returned (this parameter might be removed)
       */
      GET_STATUS((short)5, "getStatus");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MODEL_ID
            return MODEL_ID;
          case 2: // LAST_USED
            return LAST_USED;
          case 3: // EXCLUDE_INSTANCES
            return EXCLUDE_INSTANCES;
          case 4: // SYNC
            return SYNC;
          case 5: // GET_STATUS
            return GET_STATUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LASTUSED_ISSET_ID = 0;
    private static final int __SYNC_ISSET_ID = 1;
    private static final int __GETSTATUS_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MODEL_ID, new org.apache.thrift.meta_data.FieldMetaData("modelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LAST_USED, new org.apache.thrift.meta_data.FieldMetaData("lastUsed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.EXCLUDE_INSTANCES, new org.apache.thrift.meta_data.FieldMetaData("excludeInstances", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.SYNC, new org.apache.thrift.meta_data.FieldMetaData("sync", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.GET_STATUS, new org.apache.thrift.meta_data.FieldMetaData("getStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ensureLoaded_args.class, metaDataMap);
    }

    public ensureLoaded_args() {
    }

    public ensureLoaded_args(
      java.lang.String modelId,
      long lastUsed,
      java.util.List<java.lang.String> excludeInstances,
      boolean sync,
      boolean getStatus)
    {
      this();
      this.modelId = modelId;
      this.lastUsed = lastUsed;
      setLastUsedIsSet(true);
      this.excludeInstances = excludeInstances;
      this.sync = sync;
      setSyncIsSet(true);
      this.getStatus = getStatus;
      setGetStatusIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ensureLoaded_args(ensureLoaded_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetModelId()) {
        this.modelId = other.modelId;
      }
      this.lastUsed = other.lastUsed;
      if (other.isSetExcludeInstances()) {
        java.util.List<java.lang.String> __this__excludeInstances = new java.util.ArrayList<java.lang.String>(other.excludeInstances);
        this.excludeInstances = __this__excludeInstances;
      }
      this.sync = other.sync;
      this.getStatus = other.getStatus;
    }

    public ensureLoaded_args deepCopy() {
      return new ensureLoaded_args(this);
    }

    @Override
    public void clear() {
      this.modelId = null;
      setLastUsedIsSet(false);
      this.lastUsed = 0;
      if (this.excludeInstances != null) {
        this.excludeInstances.clear();
      }
      setSyncIsSet(false);
      this.sync = false;
      setGetStatusIsSet(false);
      this.getStatus = false;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getModelId() {
      return this.modelId;
    }

    public ensureLoaded_args setModelId(@org.apache.thrift.annotation.Nullable java.lang.String modelId) {
      this.modelId = modelId;
      return this;
    }

    public void unsetModelId() {
      this.modelId = null;
    }

    /** Returns true if field modelId is set (has been assigned a value) and false otherwise */
    public boolean isSetModelId() {
      return this.modelId != null;
    }

    public void setModelIdIsSet(boolean value) {
      if (!value) {
        this.modelId = null;
      }
    }

    /**
     * the timestamp associated with the load, or 0 for "now" (most typical)
     */
    public long getLastUsed() {
      return this.lastUsed;
    }

    /**
     * the timestamp associated with the load, or 0 for "now" (most typical)
     */
    public ensureLoaded_args setLastUsed(long lastUsed) {
      this.lastUsed = lastUsed;
      setLastUsedIsSet(true);
      return this;
    }

    public void unsetLastUsed() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LASTUSED_ISSET_ID);
    }

    /** Returns true if field lastUsed is set (has been assigned a value) and false otherwise */
    public boolean isSetLastUsed() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LASTUSED_ISSET_ID);
    }

    public void setLastUsedIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LASTUSED_ISSET_ID, value);
    }

    public int getExcludeInstancesSize() {
      return (this.excludeInstances == null) ? 0 : this.excludeInstances.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.String> getExcludeInstancesIterator() {
      return (this.excludeInstances == null) ? null : this.excludeInstances.iterator();
    }

    public void addToExcludeInstances(java.lang.String elem) {
      if (this.excludeInstances == null) {
        this.excludeInstances = new java.util.ArrayList<java.lang.String>();
      }
      this.excludeInstances.add(elem);
    }

    /**
     * optional list of instance ids to exclude - if the model is already loaded in one of these
     */
    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.String> getExcludeInstances() {
      return this.excludeInstances;
    }

    /**
     * optional list of instance ids to exclude - if the model is already loaded in one of these
     */
    public ensureLoaded_args setExcludeInstances(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> excludeInstances) {
      this.excludeInstances = excludeInstances;
      return this;
    }

    public void unsetExcludeInstances() {
      this.excludeInstances = null;
    }

    /** Returns true if field excludeInstances is set (has been assigned a value) and false otherwise */
    public boolean isSetExcludeInstances() {
      return this.excludeInstances != null;
    }

    public void setExcludeInstancesIsSet(boolean value) {
      if (!value) {
        this.excludeInstances = null;
      }
    }

    public boolean isSync() {
      return this.sync;
    }

    public ensureLoaded_args setSync(boolean sync) {
      this.sync = sync;
      setSyncIsSet(true);
      return this;
    }

    public void unsetSync() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SYNC_ISSET_ID);
    }

    /** Returns true if field sync is set (has been assigned a value) and false otherwise */
    public boolean isSetSync() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SYNC_ISSET_ID);
    }

    public void setSyncIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SYNC_ISSET_ID, value);
    }

    /**
     * whether an accurate loading status should be returned (this parameter might be removed)
     */
    public boolean isGetStatus() {
      return this.getStatus;
    }

    /**
     * whether an accurate loading status should be returned (this parameter might be removed)
     */
    public ensureLoaded_args setGetStatus(boolean getStatus) {
      this.getStatus = getStatus;
      setGetStatusIsSet(true);
      return this;
    }

    public void unsetGetStatus() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GETSTATUS_ISSET_ID);
    }

    /** Returns true if field getStatus is set (has been assigned a value) and false otherwise */
    public boolean isSetGetStatus() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GETSTATUS_ISSET_ID);
    }

    public void setGetStatusIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GETSTATUS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case MODEL_ID:
        if (value == null) {
          unsetModelId();
        } else {
          setModelId((java.lang.String)value);
        }
        break;

      case LAST_USED:
        if (value == null) {
          unsetLastUsed();
        } else {
          setLastUsed((java.lang.Long)value);
        }
        break;

      case EXCLUDE_INSTANCES:
        if (value == null) {
          unsetExcludeInstances();
        } else {
          setExcludeInstances((java.util.List<java.lang.String>)value);
        }
        break;

      case SYNC:
        if (value == null) {
          unsetSync();
        } else {
          setSync((java.lang.Boolean)value);
        }
        break;

      case GET_STATUS:
        if (value == null) {
          unsetGetStatus();
        } else {
          setGetStatus((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MODEL_ID:
        return getModelId();

      case LAST_USED:
        return getLastUsed();

      case EXCLUDE_INSTANCES:
        return getExcludeInstances();

      case SYNC:
        return isSync();

      case GET_STATUS:
        return isGetStatus();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MODEL_ID:
        return isSetModelId();
      case LAST_USED:
        return isSetLastUsed();
      case EXCLUDE_INSTANCES:
        return isSetExcludeInstances();
      case SYNC:
        return isSetSync();
      case GET_STATUS:
        return isSetGetStatus();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof ensureLoaded_args)
        return this.equals((ensureLoaded_args)that);
      return false;
    }

    public boolean equals(ensureLoaded_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_modelId = true && this.isSetModelId();
      boolean that_present_modelId = true && that.isSetModelId();
      if (this_present_modelId || that_present_modelId) {
        if (!(this_present_modelId && that_present_modelId))
          return false;
        if (!this.modelId.equals(that.modelId))
          return false;
      }

      boolean this_present_lastUsed = true;
      boolean that_present_lastUsed = true;
      if (this_present_lastUsed || that_present_lastUsed) {
        if (!(this_present_lastUsed && that_present_lastUsed))
          return false;
        if (this.lastUsed != that.lastUsed)
          return false;
      }

      boolean this_present_excludeInstances = true && this.isSetExcludeInstances();
      boolean that_present_excludeInstances = true && that.isSetExcludeInstances();
      if (this_present_excludeInstances || that_present_excludeInstances) {
        if (!(this_present_excludeInstances && that_present_excludeInstances))
          return false;
        if (!this.excludeInstances.equals(that.excludeInstances))
          return false;
      }

      boolean this_present_sync = true;
      boolean that_present_sync = true;
      if (this_present_sync || that_present_sync) {
        if (!(this_present_sync && that_present_sync))
          return false;
        if (this.sync != that.sync)
          return false;
      }

      boolean this_present_getStatus = true;
      boolean that_present_getStatus = true;
      if (this_present_getStatus || that_present_getStatus) {
        if (!(this_present_getStatus && that_present_getStatus))
          return false;
        if (this.getStatus != that.getStatus)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetModelId()) ? 131071 : 524287);
      if (isSetModelId())
        hashCode = hashCode * 8191 + modelId.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(lastUsed);

      hashCode = hashCode * 8191 + ((isSetExcludeInstances()) ? 131071 : 524287);
      if (isSetExcludeInstances())
        hashCode = hashCode * 8191 + excludeInstances.hashCode();

      hashCode = hashCode * 8191 + ((sync) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((getStatus) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(ensureLoaded_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetModelId(), other.isSetModelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelId, other.modelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetLastUsed(), other.isSetLastUsed());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLastUsed()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastUsed, other.lastUsed);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetExcludeInstances(), other.isSetExcludeInstances());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExcludeInstances()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.excludeInstances, other.excludeInstances);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetSync(), other.isSetSync());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSync()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sync, other.sync);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetGetStatus(), other.isSetGetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.getStatus, other.getStatus);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ensureLoaded_args(");
      boolean first = true;

      sb.append("modelId:");
      if (this.modelId == null) {
        sb.append("null");
      } else {
        sb.append(this.modelId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lastUsed:");
      sb.append(this.lastUsed);
      first = false;
      if (!first) sb.append(", ");
      sb.append("excludeInstances:");
      if (this.excludeInstances == null) {
        sb.append("null");
      } else {
        sb.append(this.excludeInstances);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sync:");
      sb.append(this.sync);
      first = false;
      if (!first) sb.append(", ");
      sb.append("getStatus:");
      sb.append(this.getStatus);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ensureLoaded_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ensureLoaded_argsStandardScheme getScheme() {
        return new ensureLoaded_argsStandardScheme();
      }
    }

    private static class ensureLoaded_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ensureLoaded_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ensureLoaded_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MODEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.modelId = iprot.readString();
                struct.setModelIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LAST_USED
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.lastUsed = iprot.readI64();
                struct.setLastUsedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // EXCLUDE_INSTANCES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  if (struct.excludeInstances == null) {
                    struct.excludeInstances = new java.util.ArrayList<java.lang.String>(_list0.size);
                  }
                  @org.apache.thrift.annotation.Nullable java.lang.String _elem1 = null;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readString();
                    struct.excludeInstances.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setExcludeInstancesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SYNC
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.sync = iprot.readBool();
                struct.setSyncIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // GET_STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.getStatus = iprot.readBool();
                struct.setGetStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ensureLoaded_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.modelId != null) {
          oprot.writeFieldBegin(MODEL_ID_FIELD_DESC);
          oprot.writeString(struct.modelId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(LAST_USED_FIELD_DESC);
        oprot.writeI64(struct.lastUsed);
        oprot.writeFieldEnd();
        if (struct.excludeInstances != null) {
          oprot.writeFieldBegin(EXCLUDE_INSTANCES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.excludeInstances.size()));
            for (java.lang.String _iter3 : struct.excludeInstances)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SYNC_FIELD_DESC);
        oprot.writeBool(struct.sync);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(GET_STATUS_FIELD_DESC);
        oprot.writeBool(struct.getStatus);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ensureLoaded_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ensureLoaded_argsTupleScheme getScheme() {
        return new ensureLoaded_argsTupleScheme();
      }
    }

    private static class ensureLoaded_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ensureLoaded_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ensureLoaded_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetModelId()) {
          optionals.set(0);
        }
        if (struct.isSetLastUsed()) {
          optionals.set(1);
        }
        if (struct.isSetExcludeInstances()) {
          optionals.set(2);
        }
        if (struct.isSetSync()) {
          optionals.set(3);
        }
        if (struct.isSetGetStatus()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetModelId()) {
          oprot.writeString(struct.modelId);
        }
        if (struct.isSetLastUsed()) {
          oprot.writeI64(struct.lastUsed);
        }
        if (struct.isSetExcludeInstances()) {
          {
            oprot.writeI32(struct.excludeInstances.size());
            for (java.lang.String _iter4 : struct.excludeInstances)
            {
              oprot.writeString(_iter4);
            }
          }
        }
        if (struct.isSetSync()) {
          oprot.writeBool(struct.sync);
        }
        if (struct.isSetGetStatus()) {
          oprot.writeBool(struct.getStatus);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ensureLoaded_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.modelId = iprot.readString();
          struct.setModelIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lastUsed = iprot.readI64();
          struct.setLastUsedIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list5 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
            if (struct.excludeInstances == null) {
              struct.excludeInstances = new java.util.ArrayList<java.lang.String>(_list5.size);
            }
            @org.apache.thrift.annotation.Nullable java.lang.String _elem6 = null;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = iprot.readString();
              struct.excludeInstances.add(_elem6);
            }
          }
          struct.setExcludeInstancesIsSet(true);
        }
        if (incoming.get(3)) {
          struct.sync = iprot.readBool();
          struct.setSyncIsSet(true);
        }
        if (incoming.get(4)) {
          struct.getStatus = iprot.readBool();
          struct.setGetStatusIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ensureLoaded_result implements org.apache.thrift.TBase<ensureLoaded_result, ensureLoaded_result._Fields>, java.io.Serializable, Cloneable, Comparable<ensureLoaded_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ensureLoaded_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField MNF_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("mnfException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField I_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("iException", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ensureLoaded_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ensureLoaded_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.ibm.watson.modelmesh.thrift.StatusInfo success; // required
    /**
     * this MM cluster doesn't know about a model with the specified id
     */
    public @org.apache.thrift.annotation.Nullable com.ibm.watson.modelmesh.thrift.ModelNotFoundException mnfException; // required
    /**
     * unexpected internal errors
     */
    public @org.apache.thrift.annotation.Nullable com.ibm.watson.modelmesh.thrift.InternalException iException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      /**
       * this MM cluster doesn't know about a model with the specified id
       */
      MNF_EXCEPTION((short)1, "mnfException"),
      /**
       * unexpected internal errors
       */
      I_EXCEPTION((short)2, "iException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MNF_EXCEPTION
            return MNF_EXCEPTION;
          case 2: // I_EXCEPTION
            return I_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ibm.watson.modelmesh.thrift.StatusInfo.class)));
      tmpMap.put(_Fields.MNF_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("mnfException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ibm.watson.modelmesh.thrift.ModelNotFoundException.class)));
      tmpMap.put(_Fields.I_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("iException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ibm.watson.modelmesh.thrift.InternalException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ensureLoaded_result.class, metaDataMap);
    }

    public ensureLoaded_result() {
    }

    public ensureLoaded_result(
      com.ibm.watson.modelmesh.thrift.StatusInfo success,
      com.ibm.watson.modelmesh.thrift.ModelNotFoundException mnfException,
      com.ibm.watson.modelmesh.thrift.InternalException iException)
    {
      this();
      this.success = success;
      this.mnfException = mnfException;
      this.iException = iException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ensureLoaded_result(ensureLoaded_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ibm.watson.modelmesh.thrift.StatusInfo(other.success);
      }
      if (other.isSetMnfException()) {
        this.mnfException = new com.ibm.watson.modelmesh.thrift.ModelNotFoundException(other.mnfException);
      }
      if (other.isSetIException()) {
        this.iException = new com.ibm.watson.modelmesh.thrift.InternalException(other.iException);
      }
    }

    public ensureLoaded_result deepCopy() {
      return new ensureLoaded_result(this);
    }

    @Override
    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
      this.mnfException = null;
      this.iException = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.ibm.watson.modelmesh.thrift.StatusInfo getSuccess() {
      return this.success;
    }

    public ensureLoaded_result setSuccess(@org.apache.thrift.annotation.Nullable com.ibm.watson.modelmesh.thrift.StatusInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    /**
     * this MM cluster doesn't know about a model with the specified id
     */
    @org.apache.thrift.annotation.Nullable
    public com.ibm.watson.modelmesh.thrift.ModelNotFoundException getMnfException() {
      return this.mnfException;
    }

    /**
     * this MM cluster doesn't know about a model with the specified id
     */
    public ensureLoaded_result setMnfException(@org.apache.thrift.annotation.Nullable com.ibm.watson.modelmesh.thrift.ModelNotFoundException mnfException) {
      this.mnfException = mnfException;
      return this;
    }

    public void unsetMnfException() {
      this.mnfException = null;
    }

    /** Returns true if field mnfException is set (has been assigned a value) and false otherwise */
    public boolean isSetMnfException() {
      return this.mnfException != null;
    }

    public void setMnfExceptionIsSet(boolean value) {
      if (!value) {
        this.mnfException = null;
      }
    }

    /**
     * unexpected internal errors
     */
    @org.apache.thrift.annotation.Nullable
    public com.ibm.watson.modelmesh.thrift.InternalException getIException() {
      return this.iException;
    }

    /**
     * unexpected internal errors
     */
    public ensureLoaded_result setIException(@org.apache.thrift.annotation.Nullable com.ibm.watson.modelmesh.thrift.InternalException iException) {
      this.iException = iException;
      return this;
    }

    public void unsetIException() {
      this.iException = null;
    }

    /** Returns true if field iException is set (has been assigned a value) and false otherwise */
    public boolean isSetIException() {
      return this.iException != null;
    }

    public void setIExceptionIsSet(boolean value) {
      if (!value) {
        this.iException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ibm.watson.modelmesh.thrift.StatusInfo)value);
        }
        break;

      case MNF_EXCEPTION:
        if (value == null) {
          unsetMnfException();
        } else {
          setMnfException((com.ibm.watson.modelmesh.thrift.ModelNotFoundException)value);
        }
        break;

      case I_EXCEPTION:
        if (value == null) {
          unsetIException();
        } else {
          setIException((com.ibm.watson.modelmesh.thrift.InternalException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case MNF_EXCEPTION:
        return getMnfException();

      case I_EXCEPTION:
        return getIException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MNF_EXCEPTION:
        return isSetMnfException();
      case I_EXCEPTION:
        return isSetIException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof ensureLoaded_result)
        return this.equals((ensureLoaded_result)that);
      return false;
    }

    public boolean equals(ensureLoaded_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_mnfException = true && this.isSetMnfException();
      boolean that_present_mnfException = true && that.isSetMnfException();
      if (this_present_mnfException || that_present_mnfException) {
        if (!(this_present_mnfException && that_present_mnfException))
          return false;
        if (!this.mnfException.equals(that.mnfException))
          return false;
      }

      boolean this_present_iException = true && this.isSetIException();
      boolean that_present_iException = true && that.isSetIException();
      if (this_present_iException || that_present_iException) {
        if (!(this_present_iException && that_present_iException))
          return false;
        if (!this.iException.equals(that.iException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetMnfException()) ? 131071 : 524287);
      if (isSetMnfException())
        hashCode = hashCode * 8191 + mnfException.hashCode();

      hashCode = hashCode * 8191 + ((isSetIException()) ? 131071 : 524287);
      if (isSetIException())
        hashCode = hashCode * 8191 + iException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ensureLoaded_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetMnfException(), other.isSetMnfException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMnfException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mnfException, other.mnfException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetIException(), other.isSetIException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iException, other.iException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ensureLoaded_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mnfException:");
      if (this.mnfException == null) {
        sb.append("null");
      } else {
        sb.append(this.mnfException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("iException:");
      if (this.iException == null) {
        sb.append("null");
      } else {
        sb.append(this.iException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ensureLoaded_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ensureLoaded_resultStandardScheme getScheme() {
        return new ensureLoaded_resultStandardScheme();
      }
    }

    private static class ensureLoaded_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ensureLoaded_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ensureLoaded_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new com.ibm.watson.modelmesh.thrift.StatusInfo();
                }
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MNF_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.mnfException == null) {
                  struct.mnfException = new com.ibm.watson.modelmesh.thrift.ModelNotFoundException();
                }
                struct.mnfException.read(iprot);
                struct.setMnfExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // I_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.iException == null) {
                  struct.iException = new com.ibm.watson.modelmesh.thrift.InternalException();
                }
                struct.iException.read(iprot);
                struct.setIExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ensureLoaded_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.mnfException != null) {
          oprot.writeFieldBegin(MNF_EXCEPTION_FIELD_DESC);
          struct.mnfException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.iException != null) {
          oprot.writeFieldBegin(I_EXCEPTION_FIELD_DESC);
          struct.iException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ensureLoaded_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ensureLoaded_resultTupleScheme getScheme() {
        return new ensureLoaded_resultTupleScheme();
      }
    }

    private static class ensureLoaded_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ensureLoaded_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ensureLoaded_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMnfException()) {
          optionals.set(1);
        }
        if (struct.isSetIException()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetMnfException()) {
          struct.mnfException.write(oprot);
        }
        if (struct.isSetIException()) {
          struct.iException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ensureLoaded_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new com.ibm.watson.modelmesh.thrift.StatusInfo();
          }
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          if (struct.mnfException == null) {
            struct.mnfException = new com.ibm.watson.modelmesh.thrift.ModelNotFoundException();
          }
          struct.mnfException.read(iprot);
          struct.setMnfExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          if (struct.iException == null) {
            struct.iException = new com.ibm.watson.modelmesh.thrift.InternalException();
          }
          struct.iException.read(iprot);
          struct.setIExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteModel_args implements org.apache.thrift.TBase<deleteModel_args, deleteModel_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteModel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteModel_args");

    private static final org.apache.thrift.protocol.TField MODEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("modelId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteModel_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteModel_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String modelId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MODEL_ID((short)1, "modelId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MODEL_ID
            return MODEL_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MODEL_ID, new org.apache.thrift.meta_data.FieldMetaData("modelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteModel_args.class, metaDataMap);
    }

    public deleteModel_args() {
    }

    public deleteModel_args(
      java.lang.String modelId)
    {
      this();
      this.modelId = modelId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteModel_args(deleteModel_args other) {
      if (other.isSetModelId()) {
        this.modelId = other.modelId;
      }
    }

    public deleteModel_args deepCopy() {
      return new deleteModel_args(this);
    }

    @Override
    public void clear() {
      this.modelId = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getModelId() {
      return this.modelId;
    }

    public deleteModel_args setModelId(@org.apache.thrift.annotation.Nullable java.lang.String modelId) {
      this.modelId = modelId;
      return this;
    }

    public void unsetModelId() {
      this.modelId = null;
    }

    /** Returns true if field modelId is set (has been assigned a value) and false otherwise */
    public boolean isSetModelId() {
      return this.modelId != null;
    }

    public void setModelIdIsSet(boolean value) {
      if (!value) {
        this.modelId = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case MODEL_ID:
        if (value == null) {
          unsetModelId();
        } else {
          setModelId((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MODEL_ID:
        return getModelId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MODEL_ID:
        return isSetModelId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof deleteModel_args)
        return this.equals((deleteModel_args)that);
      return false;
    }

    public boolean equals(deleteModel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_modelId = true && this.isSetModelId();
      boolean that_present_modelId = true && that.isSetModelId();
      if (this_present_modelId || that_present_modelId) {
        if (!(this_present_modelId && that_present_modelId))
          return false;
        if (!this.modelId.equals(that.modelId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetModelId()) ? 131071 : 524287);
      if (isSetModelId())
        hashCode = hashCode * 8191 + modelId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deleteModel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetModelId(), other.isSetModelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelId, other.modelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteModel_args(");
      boolean first = true;

      sb.append("modelId:");
      if (this.modelId == null) {
        sb.append("null");
      } else {
        sb.append(this.modelId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteModel_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteModel_argsStandardScheme getScheme() {
        return new deleteModel_argsStandardScheme();
      }
    }

    private static class deleteModel_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteModel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteModel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MODEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.modelId = iprot.readString();
                struct.setModelIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteModel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.modelId != null) {
          oprot.writeFieldBegin(MODEL_ID_FIELD_DESC);
          oprot.writeString(struct.modelId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteModel_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteModel_argsTupleScheme getScheme() {
        return new deleteModel_argsTupleScheme();
      }
    }

    private static class deleteModel_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteModel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteModel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetModelId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetModelId()) {
          oprot.writeString(struct.modelId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteModel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.modelId = iprot.readString();
          struct.setModelIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteModel_result implements org.apache.thrift.TBase<deleteModel_result, deleteModel_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteModel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteModel_result");

    private static final org.apache.thrift.protocol.TField I_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("iException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField IS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("isException", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteModel_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteModel_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.ibm.watson.modelmesh.thrift.InternalException iException; // required
    public @org.apache.thrift.annotation.Nullable InvalidStateException isException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      I_EXCEPTION((short)1, "iException"),
      IS_EXCEPTION((short)2, "isException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // I_EXCEPTION
            return I_EXCEPTION;
          case 2: // IS_EXCEPTION
            return IS_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.I_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("iException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ibm.watson.modelmesh.thrift.InternalException.class)));
      tmpMap.put(_Fields.IS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("isException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InvalidStateException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteModel_result.class, metaDataMap);
    }

    public deleteModel_result() {
    }

    public deleteModel_result(
      com.ibm.watson.modelmesh.thrift.InternalException iException,
      InvalidStateException isException)
    {
      this();
      this.iException = iException;
      this.isException = isException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteModel_result(deleteModel_result other) {
      if (other.isSetIException()) {
        this.iException = new com.ibm.watson.modelmesh.thrift.InternalException(other.iException);
      }
      if (other.isSetIsException()) {
        this.isException = new InvalidStateException(other.isException);
      }
    }

    public deleteModel_result deepCopy() {
      return new deleteModel_result(this);
    }

    @Override
    public void clear() {
      this.iException = null;
      this.isException = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.ibm.watson.modelmesh.thrift.InternalException getIException() {
      return this.iException;
    }

    public deleteModel_result setIException(@org.apache.thrift.annotation.Nullable com.ibm.watson.modelmesh.thrift.InternalException iException) {
      this.iException = iException;
      return this;
    }

    public void unsetIException() {
      this.iException = null;
    }

    /** Returns true if field iException is set (has been assigned a value) and false otherwise */
    public boolean isSetIException() {
      return this.iException != null;
    }

    public void setIExceptionIsSet(boolean value) {
      if (!value) {
        this.iException = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public InvalidStateException getIsException() {
      return this.isException;
    }

    public deleteModel_result setIsException(@org.apache.thrift.annotation.Nullable InvalidStateException isException) {
      this.isException = isException;
      return this;
    }

    public void unsetIsException() {
      this.isException = null;
    }

    /** Returns true if field isException is set (has been assigned a value) and false otherwise */
    public boolean isSetIsException() {
      return this.isException != null;
    }

    public void setIsExceptionIsSet(boolean value) {
      if (!value) {
        this.isException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case I_EXCEPTION:
        if (value == null) {
          unsetIException();
        } else {
          setIException((com.ibm.watson.modelmesh.thrift.InternalException)value);
        }
        break;

      case IS_EXCEPTION:
        if (value == null) {
          unsetIsException();
        } else {
          setIsException((InvalidStateException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case I_EXCEPTION:
        return getIException();

      case IS_EXCEPTION:
        return getIsException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case I_EXCEPTION:
        return isSetIException();
      case IS_EXCEPTION:
        return isSetIsException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof deleteModel_result)
        return this.equals((deleteModel_result)that);
      return false;
    }

    public boolean equals(deleteModel_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_iException = true && this.isSetIException();
      boolean that_present_iException = true && that.isSetIException();
      if (this_present_iException || that_present_iException) {
        if (!(this_present_iException && that_present_iException))
          return false;
        if (!this.iException.equals(that.iException))
          return false;
      }

      boolean this_present_isException = true && this.isSetIsException();
      boolean that_present_isException = true && that.isSetIsException();
      if (this_present_isException || that_present_isException) {
        if (!(this_present_isException && that_present_isException))
          return false;
        if (!this.isException.equals(that.isException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetIException()) ? 131071 : 524287);
      if (isSetIException())
        hashCode = hashCode * 8191 + iException.hashCode();

      hashCode = hashCode * 8191 + ((isSetIsException()) ? 131071 : 524287);
      if (isSetIsException())
        hashCode = hashCode * 8191 + isException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deleteModel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetIException(), other.isSetIException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iException, other.iException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetIsException(), other.isSetIsException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isException, other.isException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteModel_result(");
      boolean first = true;

      sb.append("iException:");
      if (this.iException == null) {
        sb.append("null");
      } else {
        sb.append(this.iException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("isException:");
      if (this.isException == null) {
        sb.append("null");
      } else {
        sb.append(this.isException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteModel_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteModel_resultStandardScheme getScheme() {
        return new deleteModel_resultStandardScheme();
      }
    }

    private static class deleteModel_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteModel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteModel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // I_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.iException == null) {
                  struct.iException = new com.ibm.watson.modelmesh.thrift.InternalException();
                }
                struct.iException.read(iprot);
                struct.setIExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.isException == null) {
                  struct.isException = new InvalidStateException();
                }
                struct.isException.read(iprot);
                struct.setIsExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteModel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.iException != null) {
          oprot.writeFieldBegin(I_EXCEPTION_FIELD_DESC);
          struct.iException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.isException != null) {
          oprot.writeFieldBegin(IS_EXCEPTION_FIELD_DESC);
          struct.isException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteModel_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteModel_resultTupleScheme getScheme() {
        return new deleteModel_resultTupleScheme();
      }
    }

    private static class deleteModel_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteModel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteModel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetIException()) {
          optionals.set(0);
        }
        if (struct.isSetIsException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetIException()) {
          struct.iException.write(oprot);
        }
        if (struct.isSetIsException()) {
          struct.isException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteModel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          if (struct.iException == null) {
            struct.iException = new com.ibm.watson.modelmesh.thrift.InternalException();
          }
          struct.iException.read(iprot);
          struct.setIExceptionIsSet(true);
        }
        if (incoming.get(1)) {
          if (struct.isException == null) {
            struct.isException = new InvalidStateException();
          }
          struct.isException.read(iprot);
          struct.setIsExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getStatus_args implements org.apache.thrift.TBase<getStatus_args, getStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<getStatus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStatus_args");

    private static final org.apache.thrift.protocol.TField MODEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("modelId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getStatus_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getStatus_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String modelId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MODEL_ID((short)1, "modelId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MODEL_ID
            return MODEL_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MODEL_ID, new org.apache.thrift.meta_data.FieldMetaData("modelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStatus_args.class, metaDataMap);
    }

    public getStatus_args() {
    }

    public getStatus_args(
      java.lang.String modelId)
    {
      this();
      this.modelId = modelId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStatus_args(getStatus_args other) {
      if (other.isSetModelId()) {
        this.modelId = other.modelId;
      }
    }

    public getStatus_args deepCopy() {
      return new getStatus_args(this);
    }

    @Override
    public void clear() {
      this.modelId = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getModelId() {
      return this.modelId;
    }

    public getStatus_args setModelId(@org.apache.thrift.annotation.Nullable java.lang.String modelId) {
      this.modelId = modelId;
      return this;
    }

    public void unsetModelId() {
      this.modelId = null;
    }

    /** Returns true if field modelId is set (has been assigned a value) and false otherwise */
    public boolean isSetModelId() {
      return this.modelId != null;
    }

    public void setModelIdIsSet(boolean value) {
      if (!value) {
        this.modelId = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case MODEL_ID:
        if (value == null) {
          unsetModelId();
        } else {
          setModelId((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MODEL_ID:
        return getModelId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MODEL_ID:
        return isSetModelId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getStatus_args)
        return this.equals((getStatus_args)that);
      return false;
    }

    public boolean equals(getStatus_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_modelId = true && this.isSetModelId();
      boolean that_present_modelId = true && that.isSetModelId();
      if (this_present_modelId || that_present_modelId) {
        if (!(this_present_modelId && that_present_modelId))
          return false;
        if (!this.modelId.equals(that.modelId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetModelId()) ? 131071 : 524287);
      if (isSetModelId())
        hashCode = hashCode * 8191 + modelId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetModelId(), other.isSetModelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelId, other.modelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getStatus_args(");
      boolean first = true;

      sb.append("modelId:");
      if (this.modelId == null) {
        sb.append("null");
      } else {
        sb.append(this.modelId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStatus_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getStatus_argsStandardScheme getScheme() {
        return new getStatus_argsStandardScheme();
      }
    }

    private static class getStatus_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MODEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.modelId = iprot.readString();
                struct.setModelIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.modelId != null) {
          oprot.writeFieldBegin(MODEL_ID_FIELD_DESC);
          oprot.writeString(struct.modelId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStatus_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getStatus_argsTupleScheme getScheme() {
        return new getStatus_argsTupleScheme();
      }
    }

    private static class getStatus_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetModelId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetModelId()) {
          oprot.writeString(struct.modelId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.modelId = iprot.readString();
          struct.setModelIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getStatus_result implements org.apache.thrift.TBase<getStatus_result, getStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<getStatus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField I_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("iException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getStatus_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getStatus_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.ibm.watson.modelmesh.thrift.StatusInfo success; // required
    public @org.apache.thrift.annotation.Nullable com.ibm.watson.modelmesh.thrift.InternalException iException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      I_EXCEPTION((short)1, "iException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // I_EXCEPTION
            return I_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ibm.watson.modelmesh.thrift.StatusInfo.class)));
      tmpMap.put(_Fields.I_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("iException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ibm.watson.modelmesh.thrift.InternalException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStatus_result.class, metaDataMap);
    }

    public getStatus_result() {
    }

    public getStatus_result(
      com.ibm.watson.modelmesh.thrift.StatusInfo success,
      com.ibm.watson.modelmesh.thrift.InternalException iException)
    {
      this();
      this.success = success;
      this.iException = iException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStatus_result(getStatus_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ibm.watson.modelmesh.thrift.StatusInfo(other.success);
      }
      if (other.isSetIException()) {
        this.iException = new com.ibm.watson.modelmesh.thrift.InternalException(other.iException);
      }
    }

    public getStatus_result deepCopy() {
      return new getStatus_result(this);
    }

    @Override
    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
      this.iException = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.ibm.watson.modelmesh.thrift.StatusInfo getSuccess() {
      return this.success;
    }

    public getStatus_result setSuccess(@org.apache.thrift.annotation.Nullable com.ibm.watson.modelmesh.thrift.StatusInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public com.ibm.watson.modelmesh.thrift.InternalException getIException() {
      return this.iException;
    }

    public getStatus_result setIException(@org.apache.thrift.annotation.Nullable com.ibm.watson.modelmesh.thrift.InternalException iException) {
      this.iException = iException;
      return this;
    }

    public void unsetIException() {
      this.iException = null;
    }

    /** Returns true if field iException is set (has been assigned a value) and false otherwise */
    public boolean isSetIException() {
      return this.iException != null;
    }

    public void setIExceptionIsSet(boolean value) {
      if (!value) {
        this.iException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ibm.watson.modelmesh.thrift.StatusInfo)value);
        }
        break;

      case I_EXCEPTION:
        if (value == null) {
          unsetIException();
        } else {
          setIException((com.ibm.watson.modelmesh.thrift.InternalException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case I_EXCEPTION:
        return getIException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case I_EXCEPTION:
        return isSetIException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getStatus_result)
        return this.equals((getStatus_result)that);
      return false;
    }

    public boolean equals(getStatus_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_iException = true && this.isSetIException();
      boolean that_present_iException = true && that.isSetIException();
      if (this_present_iException || that_present_iException) {
        if (!(this_present_iException && that_present_iException))
          return false;
        if (!this.iException.equals(that.iException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetIException()) ? 131071 : 524287);
      if (isSetIException())
        hashCode = hashCode * 8191 + iException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetIException(), other.isSetIException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iException, other.iException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("iException:");
      if (this.iException == null) {
        sb.append("null");
      } else {
        sb.append(this.iException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStatus_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getStatus_resultStandardScheme getScheme() {
        return new getStatus_resultStandardScheme();
      }
    }

    private static class getStatus_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new com.ibm.watson.modelmesh.thrift.StatusInfo();
                }
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // I_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.iException == null) {
                  struct.iException = new com.ibm.watson.modelmesh.thrift.InternalException();
                }
                struct.iException.read(iprot);
                struct.setIExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.iException != null) {
          oprot.writeFieldBegin(I_EXCEPTION_FIELD_DESC);
          struct.iException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStatus_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getStatus_resultTupleScheme getScheme() {
        return new getStatus_resultTupleScheme();
      }
    }

    private static class getStatus_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIException()) {
          struct.iException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new com.ibm.watson.modelmesh.thrift.StatusInfo();
          }
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          if (struct.iException == null) {
            struct.iException = new com.ibm.watson.modelmesh.thrift.InternalException();
          }
          struct.iException.read(iprot);
          struct.setIExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
