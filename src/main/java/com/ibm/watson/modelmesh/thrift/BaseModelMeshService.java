/**
 * Autogenerated by Thrift Compiler (0.14.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ibm.watson.modelmesh.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.2)")
public class BaseModelMeshService {

  /**
   *  
   */
  public interface Iface {

    /**
     * Used for internal forwarding of getStatus and ensureLoaded calls between instances
     * 
     * @param modelId
     * @param getStatus
     * @param load
     * @param sync
     * @param lastUsed
     * @param excludeInstances
     */
    public StatusInfo internalOperation(java.lang.String modelId, boolean getStatus, boolean load, boolean sync, long lastUsed, java.util.List<java.lang.String> excludeInstances) throws ModelNotFoundException, ModelLoadException, ModelNotHereException, InternalException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void internalOperation(java.lang.String modelId, boolean getStatus, boolean load, boolean sync, long lastUsed, java.util.List<java.lang.String> excludeInstances, org.apache.thrift.async.AsyncMethodCallback<StatusInfo> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public StatusInfo internalOperation(java.lang.String modelId, boolean getStatus, boolean load, boolean sync, long lastUsed, java.util.List<java.lang.String> excludeInstances) throws ModelNotFoundException, ModelLoadException, ModelNotHereException, InternalException, org.apache.thrift.TException
    {
      send_internalOperation(modelId, getStatus, load, sync, lastUsed, excludeInstances);
      return recv_internalOperation();
    }

    public void send_internalOperation(java.lang.String modelId, boolean getStatus, boolean load, boolean sync, long lastUsed, java.util.List<java.lang.String> excludeInstances) throws org.apache.thrift.TException
    {
      internalOperation_args args = new internalOperation_args();
      args.setModelId(modelId);
      args.setGetStatus(getStatus);
      args.setLoad(load);
      args.setSync(sync);
      args.setLastUsed(lastUsed);
      args.setExcludeInstances(excludeInstances);
      sendBase("internalOperation", args);
    }

    public StatusInfo recv_internalOperation() throws ModelNotFoundException, ModelLoadException, ModelNotHereException, InternalException, org.apache.thrift.TException
    {
      internalOperation_result result = new internalOperation_result();
      receiveBase(result, "internalOperation");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.mnfException != null) {
        throw result.mnfException;
      }
      if (result.mlException != null) {
        throw result.mlException;
      }
      if (result.notHere != null) {
        throw result.notHere;
      }
      if (result.iException != null) {
        throw result.iException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "internalOperation failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void internalOperation(java.lang.String modelId, boolean getStatus, boolean load, boolean sync, long lastUsed, java.util.List<java.lang.String> excludeInstances, org.apache.thrift.async.AsyncMethodCallback<StatusInfo> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      internalOperation_call method_call = new internalOperation_call(modelId, getStatus, load, sync, lastUsed, excludeInstances, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class internalOperation_call extends org.apache.thrift.async.TAsyncMethodCall<StatusInfo> {
      private java.lang.String modelId;
      private boolean getStatus;
      private boolean load;
      private boolean sync;
      private long lastUsed;
      private java.util.List<java.lang.String> excludeInstances;
      public internalOperation_call(java.lang.String modelId, boolean getStatus, boolean load, boolean sync, long lastUsed, java.util.List<java.lang.String> excludeInstances, org.apache.thrift.async.AsyncMethodCallback<StatusInfo> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.modelId = modelId;
        this.getStatus = getStatus;
        this.load = load;
        this.sync = sync;
        this.lastUsed = lastUsed;
        this.excludeInstances = excludeInstances;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("internalOperation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        internalOperation_args args = new internalOperation_args();
        args.setModelId(modelId);
        args.setGetStatus(getStatus);
        args.setLoad(load);
        args.setSync(sync);
        args.setLastUsed(lastUsed);
        args.setExcludeInstances(excludeInstances);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public StatusInfo getResult() throws ModelNotFoundException, ModelLoadException, ModelNotHereException, InternalException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_internalOperation();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("internalOperation", new internalOperation());
      return processMap;
    }

    public static class internalOperation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, internalOperation_args> {
      public internalOperation() {
        super("internalOperation");
      }

      public internalOperation_args getEmptyArgsInstance() {
        return new internalOperation_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public internalOperation_result getResult(I iface, internalOperation_args args) throws org.apache.thrift.TException {
        internalOperation_result result = new internalOperation_result();
        try {
          result.success = iface.internalOperation(args.modelId, args.getStatus, args.load, args.sync, args.lastUsed, args.excludeInstances);
        } catch (ModelNotFoundException mnfException) {
          result.mnfException = mnfException;
        } catch (ModelLoadException mlException) {
          result.mlException = mlException;
        } catch (ModelNotHereException notHere) {
          result.notHere = notHere;
        } catch (InternalException iException) {
          result.iException = iException;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("internalOperation", new internalOperation());
      return processMap;
    }

    public static class internalOperation<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, internalOperation_args, StatusInfo> {
      public internalOperation() {
        super("internalOperation");
      }

      public internalOperation_args getEmptyArgsInstance() {
        return new internalOperation_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<StatusInfo> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<StatusInfo>() { 
          public void onComplete(StatusInfo o) {
            internalOperation_result result = new internalOperation_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            internalOperation_result result = new internalOperation_result();
            if (e instanceof ModelNotFoundException) {
              result.mnfException = (ModelNotFoundException) e;
              result.setMnfExceptionIsSet(true);
              msg = result;
            } else if (e instanceof ModelLoadException) {
              result.mlException = (ModelLoadException) e;
              result.setMlExceptionIsSet(true);
              msg = result;
            } else if (e instanceof ModelNotHereException) {
              result.notHere = (ModelNotHereException) e;
              result.setNotHereIsSet(true);
              msg = result;
            } else if (e instanceof InternalException) {
              result.iException = (InternalException) e;
              result.setIExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, internalOperation_args args, org.apache.thrift.async.AsyncMethodCallback<StatusInfo> resultHandler) throws org.apache.thrift.TException {
        iface.internalOperation(args.modelId, args.getStatus, args.load, args.sync, args.lastUsed, args.excludeInstances,resultHandler);
      }
    }

  }

  public static class internalOperation_args implements org.apache.thrift.TBase<internalOperation_args, internalOperation_args._Fields>, java.io.Serializable, Cloneable, Comparable<internalOperation_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("internalOperation_args");

    private static final org.apache.thrift.protocol.TField MODEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("modelId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField GET_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("getStatus", org.apache.thrift.protocol.TType.BOOL, (short)2);
    private static final org.apache.thrift.protocol.TField LOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("load", org.apache.thrift.protocol.TType.BOOL, (short)3);
    private static final org.apache.thrift.protocol.TField SYNC_FIELD_DESC = new org.apache.thrift.protocol.TField("sync", org.apache.thrift.protocol.TType.BOOL, (short)4);
    private static final org.apache.thrift.protocol.TField LAST_USED_FIELD_DESC = new org.apache.thrift.protocol.TField("lastUsed", org.apache.thrift.protocol.TType.I64, (short)5);
    private static final org.apache.thrift.protocol.TField EXCLUDE_INSTANCES_FIELD_DESC = new org.apache.thrift.protocol.TField("excludeInstances", org.apache.thrift.protocol.TType.LIST, (short)6);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new internalOperation_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new internalOperation_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String modelId; // required
    public boolean getStatus; // required
    public boolean load; // required
    public boolean sync; // required
    public long lastUsed; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> excludeInstances; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MODEL_ID((short)1, "modelId"),
      GET_STATUS((short)2, "getStatus"),
      LOAD((short)3, "load"),
      SYNC((short)4, "sync"),
      LAST_USED((short)5, "lastUsed"),
      EXCLUDE_INSTANCES((short)6, "excludeInstances");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MODEL_ID
            return MODEL_ID;
          case 2: // GET_STATUS
            return GET_STATUS;
          case 3: // LOAD
            return LOAD;
          case 4: // SYNC
            return SYNC;
          case 5: // LAST_USED
            return LAST_USED;
          case 6: // EXCLUDE_INSTANCES
            return EXCLUDE_INSTANCES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __GETSTATUS_ISSET_ID = 0;
    private static final int __LOAD_ISSET_ID = 1;
    private static final int __SYNC_ISSET_ID = 2;
    private static final int __LASTUSED_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MODEL_ID, new org.apache.thrift.meta_data.FieldMetaData("modelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.GET_STATUS, new org.apache.thrift.meta_data.FieldMetaData("getStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.LOAD, new org.apache.thrift.meta_data.FieldMetaData("load", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.SYNC, new org.apache.thrift.meta_data.FieldMetaData("sync", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.LAST_USED, new org.apache.thrift.meta_data.FieldMetaData("lastUsed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.EXCLUDE_INSTANCES, new org.apache.thrift.meta_data.FieldMetaData("excludeInstances", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(internalOperation_args.class, metaDataMap);
    }

    public internalOperation_args() {
    }

    public internalOperation_args(
      java.lang.String modelId,
      boolean getStatus,
      boolean load,
      boolean sync,
      long lastUsed,
      java.util.List<java.lang.String> excludeInstances)
    {
      this();
      this.modelId = modelId;
      this.getStatus = getStatus;
      setGetStatusIsSet(true);
      this.load = load;
      setLoadIsSet(true);
      this.sync = sync;
      setSyncIsSet(true);
      this.lastUsed = lastUsed;
      setLastUsedIsSet(true);
      this.excludeInstances = excludeInstances;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public internalOperation_args(internalOperation_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetModelId()) {
        this.modelId = other.modelId;
      }
      this.getStatus = other.getStatus;
      this.load = other.load;
      this.sync = other.sync;
      this.lastUsed = other.lastUsed;
      if (other.isSetExcludeInstances()) {
        java.util.List<java.lang.String> __this__excludeInstances = new java.util.ArrayList<java.lang.String>(other.excludeInstances);
        this.excludeInstances = __this__excludeInstances;
      }
    }

    public internalOperation_args deepCopy() {
      return new internalOperation_args(this);
    }

    @Override
    public void clear() {
      this.modelId = null;
      setGetStatusIsSet(false);
      this.getStatus = false;
      setLoadIsSet(false);
      this.load = false;
      setSyncIsSet(false);
      this.sync = false;
      setLastUsedIsSet(false);
      this.lastUsed = 0;
      if (this.excludeInstances != null) {
        this.excludeInstances.clear();
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getModelId() {
      return this.modelId;
    }

    public internalOperation_args setModelId(@org.apache.thrift.annotation.Nullable java.lang.String modelId) {
      this.modelId = modelId;
      return this;
    }

    public void unsetModelId() {
      this.modelId = null;
    }

    /** Returns true if field modelId is set (has been assigned a value) and false otherwise */
    public boolean isSetModelId() {
      return this.modelId != null;
    }

    public void setModelIdIsSet(boolean value) {
      if (!value) {
        this.modelId = null;
      }
    }

    public boolean isGetStatus() {
      return this.getStatus;
    }

    public internalOperation_args setGetStatus(boolean getStatus) {
      this.getStatus = getStatus;
      setGetStatusIsSet(true);
      return this;
    }

    public void unsetGetStatus() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GETSTATUS_ISSET_ID);
    }

    /** Returns true if field getStatus is set (has been assigned a value) and false otherwise */
    public boolean isSetGetStatus() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GETSTATUS_ISSET_ID);
    }

    public void setGetStatusIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GETSTATUS_ISSET_ID, value);
    }

    public boolean isLoad() {
      return this.load;
    }

    public internalOperation_args setLoad(boolean load) {
      this.load = load;
      setLoadIsSet(true);
      return this;
    }

    public void unsetLoad() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOAD_ISSET_ID);
    }

    /** Returns true if field load is set (has been assigned a value) and false otherwise */
    public boolean isSetLoad() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOAD_ISSET_ID);
    }

    public void setLoadIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOAD_ISSET_ID, value);
    }

    public boolean isSync() {
      return this.sync;
    }

    public internalOperation_args setSync(boolean sync) {
      this.sync = sync;
      setSyncIsSet(true);
      return this;
    }

    public void unsetSync() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SYNC_ISSET_ID);
    }

    /** Returns true if field sync is set (has been assigned a value) and false otherwise */
    public boolean isSetSync() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SYNC_ISSET_ID);
    }

    public void setSyncIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SYNC_ISSET_ID, value);
    }

    public long getLastUsed() {
      return this.lastUsed;
    }

    public internalOperation_args setLastUsed(long lastUsed) {
      this.lastUsed = lastUsed;
      setLastUsedIsSet(true);
      return this;
    }

    public void unsetLastUsed() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LASTUSED_ISSET_ID);
    }

    /** Returns true if field lastUsed is set (has been assigned a value) and false otherwise */
    public boolean isSetLastUsed() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LASTUSED_ISSET_ID);
    }

    public void setLastUsedIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LASTUSED_ISSET_ID, value);
    }

    public int getExcludeInstancesSize() {
      return (this.excludeInstances == null) ? 0 : this.excludeInstances.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.String> getExcludeInstancesIterator() {
      return (this.excludeInstances == null) ? null : this.excludeInstances.iterator();
    }

    public void addToExcludeInstances(java.lang.String elem) {
      if (this.excludeInstances == null) {
        this.excludeInstances = new java.util.ArrayList<java.lang.String>();
      }
      this.excludeInstances.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.String> getExcludeInstances() {
      return this.excludeInstances;
    }

    public internalOperation_args setExcludeInstances(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> excludeInstances) {
      this.excludeInstances = excludeInstances;
      return this;
    }

    public void unsetExcludeInstances() {
      this.excludeInstances = null;
    }

    /** Returns true if field excludeInstances is set (has been assigned a value) and false otherwise */
    public boolean isSetExcludeInstances() {
      return this.excludeInstances != null;
    }

    public void setExcludeInstancesIsSet(boolean value) {
      if (!value) {
        this.excludeInstances = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case MODEL_ID:
        if (value == null) {
          unsetModelId();
        } else {
          setModelId((java.lang.String)value);
        }
        break;

      case GET_STATUS:
        if (value == null) {
          unsetGetStatus();
        } else {
          setGetStatus((java.lang.Boolean)value);
        }
        break;

      case LOAD:
        if (value == null) {
          unsetLoad();
        } else {
          setLoad((java.lang.Boolean)value);
        }
        break;

      case SYNC:
        if (value == null) {
          unsetSync();
        } else {
          setSync((java.lang.Boolean)value);
        }
        break;

      case LAST_USED:
        if (value == null) {
          unsetLastUsed();
        } else {
          setLastUsed((java.lang.Long)value);
        }
        break;

      case EXCLUDE_INSTANCES:
        if (value == null) {
          unsetExcludeInstances();
        } else {
          setExcludeInstances((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MODEL_ID:
        return getModelId();

      case GET_STATUS:
        return isGetStatus();

      case LOAD:
        return isLoad();

      case SYNC:
        return isSync();

      case LAST_USED:
        return getLastUsed();

      case EXCLUDE_INSTANCES:
        return getExcludeInstances();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MODEL_ID:
        return isSetModelId();
      case GET_STATUS:
        return isSetGetStatus();
      case LOAD:
        return isSetLoad();
      case SYNC:
        return isSetSync();
      case LAST_USED:
        return isSetLastUsed();
      case EXCLUDE_INSTANCES:
        return isSetExcludeInstances();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof internalOperation_args)
        return this.equals((internalOperation_args)that);
      return false;
    }

    public boolean equals(internalOperation_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_modelId = true && this.isSetModelId();
      boolean that_present_modelId = true && that.isSetModelId();
      if (this_present_modelId || that_present_modelId) {
        if (!(this_present_modelId && that_present_modelId))
          return false;
        if (!this.modelId.equals(that.modelId))
          return false;
      }

      boolean this_present_getStatus = true;
      boolean that_present_getStatus = true;
      if (this_present_getStatus || that_present_getStatus) {
        if (!(this_present_getStatus && that_present_getStatus))
          return false;
        if (this.getStatus != that.getStatus)
          return false;
      }

      boolean this_present_load = true;
      boolean that_present_load = true;
      if (this_present_load || that_present_load) {
        if (!(this_present_load && that_present_load))
          return false;
        if (this.load != that.load)
          return false;
      }

      boolean this_present_sync = true;
      boolean that_present_sync = true;
      if (this_present_sync || that_present_sync) {
        if (!(this_present_sync && that_present_sync))
          return false;
        if (this.sync != that.sync)
          return false;
      }

      boolean this_present_lastUsed = true;
      boolean that_present_lastUsed = true;
      if (this_present_lastUsed || that_present_lastUsed) {
        if (!(this_present_lastUsed && that_present_lastUsed))
          return false;
        if (this.lastUsed != that.lastUsed)
          return false;
      }

      boolean this_present_excludeInstances = true && this.isSetExcludeInstances();
      boolean that_present_excludeInstances = true && that.isSetExcludeInstances();
      if (this_present_excludeInstances || that_present_excludeInstances) {
        if (!(this_present_excludeInstances && that_present_excludeInstances))
          return false;
        if (!this.excludeInstances.equals(that.excludeInstances))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetModelId()) ? 131071 : 524287);
      if (isSetModelId())
        hashCode = hashCode * 8191 + modelId.hashCode();

      hashCode = hashCode * 8191 + ((getStatus) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((load) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((sync) ? 131071 : 524287);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(lastUsed);

      hashCode = hashCode * 8191 + ((isSetExcludeInstances()) ? 131071 : 524287);
      if (isSetExcludeInstances())
        hashCode = hashCode * 8191 + excludeInstances.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(internalOperation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetModelId(), other.isSetModelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelId, other.modelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetGetStatus(), other.isSetGetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.getStatus, other.getStatus);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetLoad(), other.isSetLoad());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoad()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.load, other.load);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetSync(), other.isSetSync());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSync()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sync, other.sync);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetLastUsed(), other.isSetLastUsed());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLastUsed()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastUsed, other.lastUsed);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetExcludeInstances(), other.isSetExcludeInstances());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExcludeInstances()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.excludeInstances, other.excludeInstances);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("internalOperation_args(");
      boolean first = true;

      sb.append("modelId:");
      if (this.modelId == null) {
        sb.append("null");
      } else {
        sb.append(this.modelId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("getStatus:");
      sb.append(this.getStatus);
      first = false;
      if (!first) sb.append(", ");
      sb.append("load:");
      sb.append(this.load);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sync:");
      sb.append(this.sync);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lastUsed:");
      sb.append(this.lastUsed);
      first = false;
      if (!first) sb.append(", ");
      sb.append("excludeInstances:");
      if (this.excludeInstances == null) {
        sb.append("null");
      } else {
        sb.append(this.excludeInstances);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class internalOperation_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public internalOperation_argsStandardScheme getScheme() {
        return new internalOperation_argsStandardScheme();
      }
    }

    private static class internalOperation_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<internalOperation_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, internalOperation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MODEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.modelId = iprot.readString();
                struct.setModelIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // GET_STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.getStatus = iprot.readBool();
                struct.setGetStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LOAD
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.load = iprot.readBool();
                struct.setLoadIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SYNC
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.sync = iprot.readBool();
                struct.setSyncIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // LAST_USED
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.lastUsed = iprot.readI64();
                struct.setLastUsedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // EXCLUDE_INSTANCES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  if (struct.excludeInstances == null) {
                    struct.excludeInstances = new java.util.ArrayList<java.lang.String>(_list8.size);
                  }
                  @org.apache.thrift.annotation.Nullable java.lang.String _elem9 = null;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = iprot.readString();
                    struct.excludeInstances.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setExcludeInstancesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, internalOperation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.modelId != null) {
          oprot.writeFieldBegin(MODEL_ID_FIELD_DESC);
          oprot.writeString(struct.modelId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(GET_STATUS_FIELD_DESC);
        oprot.writeBool(struct.getStatus);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LOAD_FIELD_DESC);
        oprot.writeBool(struct.load);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SYNC_FIELD_DESC);
        oprot.writeBool(struct.sync);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LAST_USED_FIELD_DESC);
        oprot.writeI64(struct.lastUsed);
        oprot.writeFieldEnd();
        if (struct.excludeInstances != null) {
          oprot.writeFieldBegin(EXCLUDE_INSTANCES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.excludeInstances.size()));
            for (java.lang.String _iter11 : struct.excludeInstances)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class internalOperation_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public internalOperation_argsTupleScheme getScheme() {
        return new internalOperation_argsTupleScheme();
      }
    }

    private static class internalOperation_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<internalOperation_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, internalOperation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetModelId()) {
          optionals.set(0);
        }
        if (struct.isSetGetStatus()) {
          optionals.set(1);
        }
        if (struct.isSetLoad()) {
          optionals.set(2);
        }
        if (struct.isSetSync()) {
          optionals.set(3);
        }
        if (struct.isSetLastUsed()) {
          optionals.set(4);
        }
        if (struct.isSetExcludeInstances()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetModelId()) {
          oprot.writeString(struct.modelId);
        }
        if (struct.isSetGetStatus()) {
          oprot.writeBool(struct.getStatus);
        }
        if (struct.isSetLoad()) {
          oprot.writeBool(struct.load);
        }
        if (struct.isSetSync()) {
          oprot.writeBool(struct.sync);
        }
        if (struct.isSetLastUsed()) {
          oprot.writeI64(struct.lastUsed);
        }
        if (struct.isSetExcludeInstances()) {
          {
            oprot.writeI32(struct.excludeInstances.size());
            for (java.lang.String _iter12 : struct.excludeInstances)
            {
              oprot.writeString(_iter12);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, internalOperation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.modelId = iprot.readString();
          struct.setModelIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.getStatus = iprot.readBool();
          struct.setGetStatusIsSet(true);
        }
        if (incoming.get(2)) {
          struct.load = iprot.readBool();
          struct.setLoadIsSet(true);
        }
        if (incoming.get(3)) {
          struct.sync = iprot.readBool();
          struct.setSyncIsSet(true);
        }
        if (incoming.get(4)) {
          struct.lastUsed = iprot.readI64();
          struct.setLastUsedIsSet(true);
        }
        if (incoming.get(5)) {
          {
            org.apache.thrift.protocol.TList _list13 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
            if (struct.excludeInstances == null) {
              struct.excludeInstances = new java.util.ArrayList<java.lang.String>(_list13.size);
            }
            @org.apache.thrift.annotation.Nullable java.lang.String _elem14 = null;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = iprot.readString();
              struct.excludeInstances.add(_elem14);
            }
          }
          struct.setExcludeInstancesIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class internalOperation_result implements org.apache.thrift.TBase<internalOperation_result, internalOperation_result._Fields>, java.io.Serializable, Cloneable, Comparable<internalOperation_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("internalOperation_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField MNF_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("mnfException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ML_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("mlException", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField NOT_HERE_FIELD_DESC = new org.apache.thrift.protocol.TField("notHere", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField I_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("iException", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new internalOperation_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new internalOperation_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable StatusInfo success; // required
    public @org.apache.thrift.annotation.Nullable ModelNotFoundException mnfException; // required
    public @org.apache.thrift.annotation.Nullable ModelLoadException mlException; // required
    public @org.apache.thrift.annotation.Nullable ModelNotHereException notHere; // required
    public @org.apache.thrift.annotation.Nullable InternalException iException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      MNF_EXCEPTION((short)1, "mnfException"),
      ML_EXCEPTION((short)2, "mlException"),
      NOT_HERE((short)3, "notHere"),
      I_EXCEPTION((short)4, "iException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // MNF_EXCEPTION
            return MNF_EXCEPTION;
          case 2: // ML_EXCEPTION
            return ML_EXCEPTION;
          case 3: // NOT_HERE
            return NOT_HERE;
          case 4: // I_EXCEPTION
            return I_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StatusInfo.class)));
      tmpMap.put(_Fields.MNF_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("mnfException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ModelNotFoundException.class)));
      tmpMap.put(_Fields.ML_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("mlException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ModelLoadException.class)));
      tmpMap.put(_Fields.NOT_HERE, new org.apache.thrift.meta_data.FieldMetaData("notHere", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ModelNotHereException.class)));
      tmpMap.put(_Fields.I_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("iException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InternalException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(internalOperation_result.class, metaDataMap);
    }

    public internalOperation_result() {
    }

    public internalOperation_result(
      StatusInfo success,
      ModelNotFoundException mnfException,
      ModelLoadException mlException,
      ModelNotHereException notHere,
      InternalException iException)
    {
      this();
      this.success = success;
      this.mnfException = mnfException;
      this.mlException = mlException;
      this.notHere = notHere;
      this.iException = iException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public internalOperation_result(internalOperation_result other) {
      if (other.isSetSuccess()) {
        this.success = new StatusInfo(other.success);
      }
      if (other.isSetMnfException()) {
        this.mnfException = new ModelNotFoundException(other.mnfException);
      }
      if (other.isSetMlException()) {
        this.mlException = new ModelLoadException(other.mlException);
      }
      if (other.isSetNotHere()) {
        this.notHere = new ModelNotHereException(other.notHere);
      }
      if (other.isSetIException()) {
        this.iException = new InternalException(other.iException);
      }
    }

    public internalOperation_result deepCopy() {
      return new internalOperation_result(this);
    }

    @Override
    public void clear() {
      if (this.success != null) {
        this.success.clear();
      }
      this.mnfException = null;
      this.mlException = null;
      this.notHere = null;
      this.iException = null;
    }

    @org.apache.thrift.annotation.Nullable
    public StatusInfo getSuccess() {
      return this.success;
    }

    public internalOperation_result setSuccess(@org.apache.thrift.annotation.Nullable StatusInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ModelNotFoundException getMnfException() {
      return this.mnfException;
    }

    public internalOperation_result setMnfException(@org.apache.thrift.annotation.Nullable ModelNotFoundException mnfException) {
      this.mnfException = mnfException;
      return this;
    }

    public void unsetMnfException() {
      this.mnfException = null;
    }

    /** Returns true if field mnfException is set (has been assigned a value) and false otherwise */
    public boolean isSetMnfException() {
      return this.mnfException != null;
    }

    public void setMnfExceptionIsSet(boolean value) {
      if (!value) {
        this.mnfException = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ModelLoadException getMlException() {
      return this.mlException;
    }

    public internalOperation_result setMlException(@org.apache.thrift.annotation.Nullable ModelLoadException mlException) {
      this.mlException = mlException;
      return this;
    }

    public void unsetMlException() {
      this.mlException = null;
    }

    /** Returns true if field mlException is set (has been assigned a value) and false otherwise */
    public boolean isSetMlException() {
      return this.mlException != null;
    }

    public void setMlExceptionIsSet(boolean value) {
      if (!value) {
        this.mlException = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ModelNotHereException getNotHere() {
      return this.notHere;
    }

    public internalOperation_result setNotHere(@org.apache.thrift.annotation.Nullable ModelNotHereException notHere) {
      this.notHere = notHere;
      return this;
    }

    public void unsetNotHere() {
      this.notHere = null;
    }

    /** Returns true if field notHere is set (has been assigned a value) and false otherwise */
    public boolean isSetNotHere() {
      return this.notHere != null;
    }

    public void setNotHereIsSet(boolean value) {
      if (!value) {
        this.notHere = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public InternalException getIException() {
      return this.iException;
    }

    public internalOperation_result setIException(@org.apache.thrift.annotation.Nullable InternalException iException) {
      this.iException = iException;
      return this;
    }

    public void unsetIException() {
      this.iException = null;
    }

    /** Returns true if field iException is set (has been assigned a value) and false otherwise */
    public boolean isSetIException() {
      return this.iException != null;
    }

    public void setIExceptionIsSet(boolean value) {
      if (!value) {
        this.iException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((StatusInfo)value);
        }
        break;

      case MNF_EXCEPTION:
        if (value == null) {
          unsetMnfException();
        } else {
          setMnfException((ModelNotFoundException)value);
        }
        break;

      case ML_EXCEPTION:
        if (value == null) {
          unsetMlException();
        } else {
          setMlException((ModelLoadException)value);
        }
        break;

      case NOT_HERE:
        if (value == null) {
          unsetNotHere();
        } else {
          setNotHere((ModelNotHereException)value);
        }
        break;

      case I_EXCEPTION:
        if (value == null) {
          unsetIException();
        } else {
          setIException((InternalException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case MNF_EXCEPTION:
        return getMnfException();

      case ML_EXCEPTION:
        return getMlException();

      case NOT_HERE:
        return getNotHere();

      case I_EXCEPTION:
        return getIException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case MNF_EXCEPTION:
        return isSetMnfException();
      case ML_EXCEPTION:
        return isSetMlException();
      case NOT_HERE:
        return isSetNotHere();
      case I_EXCEPTION:
        return isSetIException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof internalOperation_result)
        return this.equals((internalOperation_result)that);
      return false;
    }

    public boolean equals(internalOperation_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_mnfException = true && this.isSetMnfException();
      boolean that_present_mnfException = true && that.isSetMnfException();
      if (this_present_mnfException || that_present_mnfException) {
        if (!(this_present_mnfException && that_present_mnfException))
          return false;
        if (!this.mnfException.equals(that.mnfException))
          return false;
      }

      boolean this_present_mlException = true && this.isSetMlException();
      boolean that_present_mlException = true && that.isSetMlException();
      if (this_present_mlException || that_present_mlException) {
        if (!(this_present_mlException && that_present_mlException))
          return false;
        if (!this.mlException.equals(that.mlException))
          return false;
      }

      boolean this_present_notHere = true && this.isSetNotHere();
      boolean that_present_notHere = true && that.isSetNotHere();
      if (this_present_notHere || that_present_notHere) {
        if (!(this_present_notHere && that_present_notHere))
          return false;
        if (!this.notHere.equals(that.notHere))
          return false;
      }

      boolean this_present_iException = true && this.isSetIException();
      boolean that_present_iException = true && that.isSetIException();
      if (this_present_iException || that_present_iException) {
        if (!(this_present_iException && that_present_iException))
          return false;
        if (!this.iException.equals(that.iException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetMnfException()) ? 131071 : 524287);
      if (isSetMnfException())
        hashCode = hashCode * 8191 + mnfException.hashCode();

      hashCode = hashCode * 8191 + ((isSetMlException()) ? 131071 : 524287);
      if (isSetMlException())
        hashCode = hashCode * 8191 + mlException.hashCode();

      hashCode = hashCode * 8191 + ((isSetNotHere()) ? 131071 : 524287);
      if (isSetNotHere())
        hashCode = hashCode * 8191 + notHere.hashCode();

      hashCode = hashCode * 8191 + ((isSetIException()) ? 131071 : 524287);
      if (isSetIException())
        hashCode = hashCode * 8191 + iException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(internalOperation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetMnfException(), other.isSetMnfException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMnfException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mnfException, other.mnfException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetMlException(), other.isSetMlException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMlException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mlException, other.mlException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetNotHere(), other.isSetNotHere());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotHere()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notHere, other.notHere);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetIException(), other.isSetIException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iException, other.iException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("internalOperation_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mnfException:");
      if (this.mnfException == null) {
        sb.append("null");
      } else {
        sb.append(this.mnfException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mlException:");
      if (this.mlException == null) {
        sb.append("null");
      } else {
        sb.append(this.mlException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notHere:");
      if (this.notHere == null) {
        sb.append("null");
      } else {
        sb.append(this.notHere);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("iException:");
      if (this.iException == null) {
        sb.append("null");
      } else {
        sb.append(this.iException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class internalOperation_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public internalOperation_resultStandardScheme getScheme() {
        return new internalOperation_resultStandardScheme();
      }
    }

    private static class internalOperation_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<internalOperation_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, internalOperation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.success == null) {
                  struct.success = new StatusInfo();
                }
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // MNF_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.mnfException == null) {
                  struct.mnfException = new ModelNotFoundException();
                }
                struct.mnfException.read(iprot);
                struct.setMnfExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ML_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.mlException == null) {
                  struct.mlException = new ModelLoadException();
                }
                struct.mlException.read(iprot);
                struct.setMlExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NOT_HERE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.notHere == null) {
                  struct.notHere = new ModelNotHereException();
                }
                struct.notHere.read(iprot);
                struct.setNotHereIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // I_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                if (struct.iException == null) {
                  struct.iException = new InternalException();
                }
                struct.iException.read(iprot);
                struct.setIExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, internalOperation_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.mnfException != null) {
          oprot.writeFieldBegin(MNF_EXCEPTION_FIELD_DESC);
          struct.mnfException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.mlException != null) {
          oprot.writeFieldBegin(ML_EXCEPTION_FIELD_DESC);
          struct.mlException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.notHere != null) {
          oprot.writeFieldBegin(NOT_HERE_FIELD_DESC);
          struct.notHere.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.iException != null) {
          oprot.writeFieldBegin(I_EXCEPTION_FIELD_DESC);
          struct.iException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class internalOperation_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public internalOperation_resultTupleScheme getScheme() {
        return new internalOperation_resultTupleScheme();
      }
    }

    private static class internalOperation_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<internalOperation_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, internalOperation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetMnfException()) {
          optionals.set(1);
        }
        if (struct.isSetMlException()) {
          optionals.set(2);
        }
        if (struct.isSetNotHere()) {
          optionals.set(3);
        }
        if (struct.isSetIException()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetMnfException()) {
          struct.mnfException.write(oprot);
        }
        if (struct.isSetMlException()) {
          struct.mlException.write(oprot);
        }
        if (struct.isSetNotHere()) {
          struct.notHere.write(oprot);
        }
        if (struct.isSetIException()) {
          struct.iException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, internalOperation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          if (struct.success == null) {
            struct.success = new StatusInfo();
          }
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          if (struct.mnfException == null) {
            struct.mnfException = new ModelNotFoundException();
          }
          struct.mnfException.read(iprot);
          struct.setMnfExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          if (struct.mlException == null) {
            struct.mlException = new ModelLoadException();
          }
          struct.mlException.read(iprot);
          struct.setMlExceptionIsSet(true);
        }
        if (incoming.get(3)) {
          if (struct.notHere == null) {
            struct.notHere = new ModelNotHereException();
          }
          struct.notHere.read(iprot);
          struct.setNotHereIsSet(true);
        }
        if (incoming.get(4)) {
          if (struct.iException == null) {
            struct.iException = new InternalException();
          }
          struct.iException.read(iprot);
          struct.setIExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
